#!/usr/bin/perl
#
# Validate the BIG-IP status for specified environment.
# Following items will be checked:
#  - Pool
#
# Return 0 if all the pools status are PASS or WARN.
# Return 1 if > 50% pools status are PASS or WARN.
# Return 2 if < 50% pools status are PASS or WARN.
#
# Usage: validate_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -j | --json              Return the JSON format status.
#  -m | --show-member       Show the detail pool member status.
#     | --show-monitor      Show monitor details.
#     | --show-pass         Show the pass pools.
#  -h | --help              Show help information.
#
# Examples:
#  validate_bigip -e srwd76
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/utl/devops/lib/perl';
use lib '/nas/reg/lib/perl';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use JSON;
use BigIP::iControl;
use MIME::Base64;
use Stubhub::BigIP::Pool::Handler qw (
                                    get_env_pool_list
                                    get_pool_members_status
                                    get_pool_members_status_without_monitor
                                    get_monitor_state
                                );
use Stubhub::BigIP::System::Util qw (
                                    get_icontrol
                                    get_bigip
                                    del_object_prefix
                                );
use Stubhub::Log::Util qw (
                            init
                        );
use Stubhub::Util::Host qw (
                            get_hostname_by_ip
                        );

# Get options
my $show_usage = qw{};
my $return_json = qw{};
my $show_member_status = qw{};
my $show_pass = qw{};
my $show_monitor = qw{};
my $envid = qw{};
my $options_okay = GetOptions (
   'e|env=s'       => \$envid,
   'm|show-member' => \$show_member_status,
   'show-monitor'  => \$show_monitor,
   'show-pass'     => \$show_pass,
   'j|json'        => \$return_json,
   'h|help'        => \$show_usage,
);

$show_member_status = 1 if $show_monitor;

Stubhub::Log::Util->init();

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Validate the BIG-IP settings for specified environment.
Following items will be checked:
 - Pool

Return 0 if all the pools status are PASS or WARN.
Return 1 if > 50% pools status are PASS or WARN.
Return 2 if < 50% pools status are PASS or WARN.

Usage: validate_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -j | --json              Return the JSON format status.
 -m | --show-member       Show the detail pool member status.
    | --show-monitor      Show monitor details.
    | --show-pass         Show the pass pools.
 -h | --help              Show help information.

Examples:
 validate_bigip -e srwd76

END_OF_HELP
}

#
# Validate Pool status for specific environment.
#
sub validate_env_pool_status {
    my ( $bigip_ref, $pattern ) = @_;
    my @pool_list = get_env_pool_list( $bigip_ref, $pattern );
    my @filtered_pool_list = filter_pool_list( @pool_list );
    my @pools_status;
    foreach my $pool ( @filtered_pool_list ) {

        my %pool_status;
        $pool = del_object_prefix( $bigip_ref, $pool );
        $pool_status{ 'pool' } = $pool;
        $pool_status{ 'status_description' } = $bigip_ref->{ "iControl" }->get_ltm_pool_status_as_string( $pool );

        my $pool_pass = 1;
        $pool_pass = 0 if ( $pool_status{ 'status_description' } =~ /either don't have service checking enabled/
                or $pool_status{ 'status_description' } !~ /The pool is available/ );

        # Get pool status on demand.
        my $pool_members_ref;
        if ( $return_json ) {
            $pool_members_ref = get_pool_members_status( $bigip_ref, $pool );
            $pool_status{ 'members' } = $pool_members_ref; 
        } elsif ( $show_member_status ) {
            if ( $show_pass or not $pool_pass ) {
                if ( $show_monitor ) {
                    $pool_members_ref = get_pool_members_status( $bigip_ref, $pool );
                } else {
                    $pool_members_ref = get_pool_members_status_without_monitor( $bigip_ref, $pool );
                }
                $pool_status{ 'members' } = $pool_members_ref; 
            }
        }

        push @pools_status, \%pool_status;
    }
    return \@pools_status;
}

#
# Print the pool status.
#
sub print_pool_status {
    my ( $bigip_ref, $int_ext, $pattern ) = @_;

    my $pools_status_ref = validate_env_pool_status( $bigip_ref, $pattern );
    my $pass_count = 0;
    my $fail_count = 0;

    foreach my $pool_status_ref ( @{ $pools_status_ref }) {
        my %pool_status = %{ $pool_status_ref };
        my $pool_members_status_ref = $pool_status{ 'members' };

        my $pass = 0;

        my $pool_name = $pool_status{ 'pool' };
        
        if ( $pool_status{ 'status_description' } =~ /either don't have service checking enabled/ ) {
            printf "%-41s %-8s %-10s\n", $pool_name, uc( $int_ext ), "WARN";
            $pass = 0;
            $pass_count += 1;
        } elsif ( $pool_status{ 'status_description' } !~ /The pool is available/ ) {
            printf "%-41s %-8s %-10s\n", $pool_name, uc( $int_ext ), "FAIL";
            $pass = 1;
            $fail_count += 1;
        } else {
            printf "%-41s %-8s %-10s\n", $pool_name, uc( $int_ext ), "PASS" if $show_pass;
            $pass = 0;
            $pass_count += 1;
        }

        if ( $show_member_status ) {
            foreach my $pool_member_status_ref ( @{ $pool_members_status_ref } ) {
                my $member_host = $pool_member_status_ref->{'member'}->{'address'};
                my $member_port = $pool_member_status_ref->{'member'}->{'port'};
                my $member_status = $pool_member_status_ref->{'object_status'}->{'availability_status'};
                my $member_enabled = $pool_member_status_ref->{'object_status'}->{'enabled_status'};

                if ( $member_host eq "" ) {
                } else {
                    $member_host = "$member_host:$member_port";
                }

                if ( $member_status eq "AVAILABILITY_STATUS_GREEN" ) {
                    $member_status = "PASS";
                } else {
                    $member_status = "FAIL";
                }

                if ( $member_enabled eq "ENABLED_STATUS_ENABLED" ) {
                    $member_enabled = "Enabled";
                } else {
                    $member_enabled = "Disabled";
                }

                if ( $show_pass or $pass == 1 ) {
                    printf "       %-34s %-8s %-5s\n", $member_host, $member_enabled, $member_status;
                    if ( $show_monitor ) {
                        foreach my $monitor_status ( @{ $pool_member_status_ref->{ 'monitor' } } ) {
                            my $monitor_enabled = "Disabled";
                            $monitor_enabled = "Enabled" if $monitor_status->{ 'enabled_state' } == 1;
                            my $monitor_up = "FAIL";
                            $monitor_up = "PASS" if $monitor_status->{ 'instance_state' } eq "INSTANCE_STATE_UP";
                            printf "       - %-32s %-8s %-5s\n", del_object_prefix( $bigip_ref, $monitor_status->{ 'template_name' } ), $monitor_enabled, $monitor_up;
                            print  "       -- " . $monitor_status->{ 'send_string' } . "\n" if defined $monitor_status->{ 'send_string' } and $monitor_status->{ 'send_string' } ne "";
                        }
                    }
                }
            }
        }
    }

    if ( scalar @{ $pools_status_ref } == 0 ) {
        printf "Error: No pools found for $pattern\n";
        return 0;
    }

    return ( $pass_count, $fail_count );
}

#
# Filter with ignore POOL list.
#
sub filter_pool_list {
    my ( @pool_list ) = @_;
    Readonly my $IGNORE_LIST => '/nas/utl/devops/etc/bigip_ignore_pool.lst';
    my @filtered_pool_list;
    open( FILE, $IGNORE_LIST );
    my @ignore_lists = <FILE>;
    my $ignore = 0;
    foreach my $pool_name ( @pool_list ) {
        $ignore = 0;
        foreach my $ignore_list ( @ignore_lists ) {
            chomp $ignore_list;
            if ( $pool_name =~ /$ignore_list/) {
                $ignore = 1;
            }
        }
        if ( not $ignore ) {
            push @filtered_pool_list, $pool_name;
        }
    }
    close ( FILE );
    return @filtered_pool_list;
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Parameter validation
#
if ( ! defined $envid) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Main
#
my $bigip_ref = get_bigip( $envid );
my $internal_bigip_ref = $bigip_ref->{ "int" };
my $external_bigip_ref = $bigip_ref->{ "ext" };

if ( not $return_json ) {
    my ( $int_pass_count, $int_fail_count ) = print_pool_status( $internal_bigip_ref, "int", $envid );
    my ( $ext_pass_count, $ext_fail_count ) = print_pool_status( $external_bigip_ref, "ext", $envid );

    my $overall_pass_rate = ( $ext_pass_count + $ext_fail_count + $int_pass_count + $int_fail_count ) / ( $ext_pass_count + $int_pass_count );

    if ( $overall_pass_rate == 1 ) {
        print "====================================\n" if $show_pass;
        print "Overall: PASS\n";
        exit 0;
    } elsif ( $overall_pass_rate > 1 and $overall_pass_rate < 2 ) {
        print "====================================\n";
        print "Overall: FAIL\n";
        exit 1;
    }
    else {
        print "====================================\n";
        print "Overall: FAIL\n";
        exit 2;
    }
    exit 0;
} else {
    my $internal_status_ref = validate_env_pool_status( $internal_bigip_ref, $envid );
    my $external_status_ref = validate_env_pool_status( $external_bigip_ref, $envid );
    my %env_status;
    $env_status{ 'internal' } = $internal_status_ref;
    $env_status{ 'external' } = $external_status_ref;
    my $json_text = to_json( \%env_status , { allow_blessed=>1 } );
    print $json_text;
    exit 0;
}
