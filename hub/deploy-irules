#!/usr/bin/perl


use strict;
use warnings;

#use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';
use lib '/nas/reg/lib/perl';

use Cwd;
use File::Basename;
use File::Path;
use Getopt::Long qw( :config no_ignore_case bundling );
use List::Util qw( first );
use Log::Transcript;
use Readonly;
use REG::P4::Util qw(
                      $P4OPTS
                      branch_path
                      is_valid_branch
                      logged_in
                      p4cmd
                    );
use REG::Util qw(
                  make_lock_directory
                  mktmpdir
                  ql
                  refchk
                  value_echo
                );
use Stubhub::P4::Client qw (
                  check_out_perforce_file
                  clean_perforce_client
                );
use Stubhub::BigIP::System::Info qw (
                            get_bigip_server
                            get_exclude_list
                           );
use Stubhub::Log::Util qw (
                            init
                            get_logger
                            get_logger_with_loglevel
                            add_syslog_appender
                           );
use REG::RedeemTokens qw ( redeem_tokens );
use Sys::Hostname;

$|++;

$ENV{ PATH } = '/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin';
$ENV{ PATH } .= ':/opt/java/bin:/opt/ant/bin';

$ENV{ JAVA_HOME } = '/opt/java';

     # install signal handlers
$SIG{ HUP }  = \&catch_signal;
$SIG{ INT }  = \&catch_signal;
$SIG{ TERM } = \&catch_signal;

sub clean_die ( @ ) ;

my $pgm = basename $0;

     # capture command line information and create a string
     # representing the original arguments to this program
Readonly my @ORIGINAL_ARGV => @ARGV;
Readonly my $ORIGINAL_ARGV => ql( @ARGV );


my $usage = << "_END_OF_USAGE_";
usage: $pgm options

options:

  -b,--branch Branch     branch 
  -r,--irule iRule,...   irules
  -e,--environment Env   environment 
  -h,--help              List usage
  -v,--verbose           Select verbose output mode.
_END_OF_USAGE_


Readonly my $BATCHMODE => not ( -t );

not @ARGV and clean_die $usage;

my $optargs;

if ( not GetOptions (
           'b|branch=s'          => \$optargs->{ branch },
           'r|irule=s'           => \$optargs->{ irule },
           'h|help'              => \$optargs->{ help },
           'e|environment=s'     => \$optargs->{ environment },
           'v|verbose'           => \$optargs->{ verbose },
         )
   )
{
       # otherwise log the command line args and die, sending email in
       # batchmode

  $BATCHMODE and clean_die "cmdline => $ORIGINAL_ARGV\n$usage";
  die "cmdline => $ORIGINAL_ARGV\n$usage";
} # if

$optargs->{ help } and warn $usage and exit 0;

Readonly my $VERBOSE         => defined $optargs->{ verbose };
Readonly my $BRANCH          => $optargs->{ branch };
Readonly my $ENVIRONMENT     => $optargs->{ environment };
Readonly my $IRULE           => $optargs->{ irule };

Stubhub::Log::Util->init();
our $logger = get_logger_with_loglevel( $VERBOSE );
add_syslog_appender( $logger, "deploy_bigip", "$ENVIRONMENT" );


value_echo( 'cmd',      "$pgm @ORIGINAL_ARGV");
defined $BRANCH         and value_echo( 'branch',      $BRANCH );
defined $ENVIRONMENT    and value_echo( 'environment', $ENVIRONMENT );
defined $IRULE          and value_echo( 'irule',       $IRULE);

my $env = uc $ENVIRONMENT;

my @include_irule = split ",", $IRULE if $IRULE;

my $globalResult=0;

my $iruleDir = qw{};
if ( -d "/nas/release/$env/$BRANCH/config-f5/conf/etc/stubhub/f5/irules" ) {
  $iruleDir = get_irule_from_build_label( $env, $BRANCH );
} else {
  # $iruleDir = get_irule_from_p4( $env, $BRANCH );
  $iruleDir = get_irule_from_github( $env, $BRANCH );
}

# Get the internal / external rule
my %excluded_rule = ();
my @internal_excluded_rules = get_exclude_list( $ENVIRONMENT, "internal", "rule" );
my %internal_excluded_rules_hash = map { $_ => 1 } @internal_excluded_rules;
my @external_excluded_rules = get_exclude_list( $ENVIRONMENT, "external", "rule" );
my %external_excluded_rules_hash = map { $_ => 1 } @external_excluded_rules;
 
$excluded_rule{ "int" } = \%internal_excluded_rules_hash;
$excluded_rule{ "ext" } = \%external_excluded_rules_hash;

foreach my $intExt ("int", "ext") {
  logwarn "Irules dir not found: $iruleDir" && exit 0 unless -d $iruleDir;
    
  my $iruleFiles = `/bin/ls -1 $iruleDir/$intExt/*`;
  $VERBOSE && value_echo( 'iruleFiles', $iruleFiles );
  logwarn "No Irules in $iruleDir" && exit 0 unless $iruleFiles;
  
  foreach my $iRuleFile (split /\n/, $iruleFiles) {
    my $foundIruleSuccess=0;
    next unless $iRuleFile;
    if ( scalar @include_irule > 0 ) {
        my $included = 0;
        foreach my $irule ( @include_irule ) {
            if ( $iRuleFile =~ /\/$irule$/ ) {
                $included = 1;
                last;
            }
        }
        next unless $included;
    }
    my %excluded_rule_hash = %{ $excluded_rule{ $intExt } };
    my $iRuleFileName = $iRuleFile;
    $iRuleFileName =~ s".*/(.*)"$1";
    if ( exists( $excluded_rule_hash{ $iRuleFileName } ) ) {
        next;
    }
    logecho "===================================";
    #my $cmd = "/nas/utl/devops/bin/PerlLocalLbRule.pl $intExt load $iRuleFile";
    my $cmd = "/nas/home/minjzhang/bin/PerlLocalLbRule.pl $intExt load $iRuleFile";
    #$cmd = "/usr/bin/ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no srwd00mon005 /nas/utl/devops/bin/PerlLocalLbRule.pl $intExt load $ENVIRONMENT $iRuleFile";
    $cmd = "/usr/bin/ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no srwd00mon005 /nas/home/minjzhang/bin/PerlLocalLbRule.pl $intExt load $ENVIRONMENT $iRuleFile";

    value_echo('cmd', $cmd);

    open my $CMD, "$cmd 2>&1 |"
      or clean_die "cmd => '$cmd': can't open command: $!";

    while ( <$CMD> ) {
      logecho "output: $_";
      #iRule srwd51-www successfully created
      $foundIruleSuccess++ if /iRule.*successfully (created|updated)/;
    } 
    unless ($foundIruleSuccess) {
      logwarn "loading irule FAILED: cmd: $cmd";
      $globalResult++;
    }

    close $CMD;
  }
  system("/bin/rm p4_dynamic_dir -rf");
}

exit $globalResult;

#------------------------------------------------------------------------
# Get irule configuration files from build label.
sub get_irule_from_build_label {
  my ( $env, $build_label ) = @_;
  return "/nas/release/$env/$build_label/config-f5/conf/etc/stubhub/f5/irules";
}

#------------------------------------------------------------------------
# Get irule configuration files from github repository.
sub get_irule_from_github {
  my ( $env, $branch_name ) = @_;
  my $env_id = lc($env);

  Readonly my $F5_REPOSITORY => "Stubhub/f5";
  Readonly my $CHECKOUT_PATH => "/nas/reg/f5";

  if ( $branch_name eq "main" ) {
  } elsif ( $branch_name =~ m/^rb_/ ) {
  } elsif ( $branch_name =~ m/^pb_/ ) {
  } else {
    print "Error: Branch name $branch_name doesn't exist in depot.\n";
    exit 1;
  }
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
  my $nice_timestamp = sprintf ( "%04d%02d%02d%02d%02d%02d",
        $year+1900,$mon+1,$mday,$hour,$min,$sec);
  my $checkout_path = "$CHECKOUT_PATH/$branch_name-" . $nice_timestamp;
  $logger->info( "Checking out from [$F5_REPOSITORY] to [$checkout_path]." );
  system( "/nas/home/minjzhang/bin/git_checkout -r $F5_REPOSITORY -p $checkout_path" );
  $logger->info( "Checkout finished from [$F5_REPOSITORY]." );
  system("/bin/chmod u+w $checkout_path -R");

  foreach my $intExt ("int", "ext") {
    my $iruleDir = "$checkout_path/irules/$intExt";
    logwarn "Irules dir not found: $iruleDir" && exit 0 unless -d $iruleDir;

    my $iruleFiles = `/bin/ls -1 $iruleDir/*`;
    $VERBOSE && value_echo( 'iruleFiles', $iruleFiles );
    logwarn "No Irules in $iruleDir" && exit 0 unless $iruleFiles;
    
    foreach my $iRuleFile (split /\n/, $iruleFiles) {
      redeem_config_tokens( $iRuleFile, $env_id, $branch_name);
    }
  }

  my $uc_env_id = uc( $env_id );
  my $dest_file_dir = "/nas/release/$uc_env_id";
  system("/usr/bin/sudo /bin/cp -rf $checkout_path/irules $dest_file_dir");

  # Sleep for 5 seconds to allow /nas/reg/f5 sync.
  sleep 5;
  system( "/bin/rm -rf $checkout_path" );
  sleep 5;

  $dest_file_dir = "$dest_file_dir/irules";

  return ( $dest_file_dir );
}

#------------------------------------------------------------------------
# Get irule configuration files from P4 depot.
sub get_irule_from_p4 {
  my ( $env, $branch_name ) = @_;
  my $env_id = lc($env);

  my $irule_subdir = "templates/fsroot/etc/stubhub/f5/irules";

  my $p4_irule_dir = qw{};
  if ( $branch_name eq "main" ) {
    $p4_irule_dir = "/depot/main/$irule_subdir";
  } elsif ( $branch_name =~ m/^rb_/ ) {
    $p4_irule_dir = "/depot/release/$branch_name/$irule_subdir";
  } elsif ( $branch_name =~ m/^pb_/ ) {
    $p4_irule_dir = "/depot/project/$branch_name/$irule_subdir";
  } else {
    print "Error: Branch name $branch_name doesn't exist in depot.\n";
    exit 1;
  }
  my ( $dynamic_perforce_client, $dynamic_perforce_dir )
    = check_out_perforce_file("/$p4_irule_dir/...");
  system("/bin/chmod u+w $dynamic_perforce_dir -R");

  foreach my $intExt ("int", "ext") {
    my $iruleDir = "$dynamic_perforce_dir$p4_irule_dir/$intExt";
    logwarn "Irules dir not found: $iruleDir" && exit 0 unless -d $iruleDir;

    my $iruleFiles = `/bin/ls -1 $iruleDir/*`;
    $VERBOSE && value_echo( 'iruleFiles', $iruleFiles );
    logwarn "No Irules in $iruleDir" && exit 0 unless $iruleFiles;
    
    foreach my $iRuleFile (split /\n/, $iruleFiles) {
      redeem_config_tokens( $iRuleFile, $env_id, $branch_name);
    }
  }

  my $uc_env_id = uc( $env_id );
  my $dest_file_dir = "/nas/release/$uc_env_id";
  system("/usr/bin/sudo /bin/cp -rf $dynamic_perforce_dir/$p4_irule_dir $dest_file_dir");

  clean_perforce_client( $dynamic_perforce_client, $dynamic_perforce_dir );
  $dest_file_dir = "$dest_file_dir/irules";

  return ( $dest_file_dir );
}

#------------------------------------------------------------------------
# Redeem configuration tokens
sub redeem_config_tokens {
  my ( $config_file_path, $envid, $branch_name ) = @_;

  open my $CONFIG_FILE_FH, '<', $config_file_path
    or clean_die "redeem_config_tokens(): can't open config file for detokenization;",
                 " path => '$config_file_path': $!";
  my $config_file_lines = [ <$CONFIG_FILE_FH> ];

  Readonly my $TOKEN_TABLE_BASED_FILE => "token-table-env-based";
  Readonly my $TOKEN_TABLE_BASED_DEPOT_PATH => "/internal/dev/properties/tokenization/$TOKEN_TABLE_BASED_FILE";

  my ( $dynamic_perforce_client, $dynamic_perforce_dir )
    = check_out_perforce_file("/$TOKEN_TABLE_BASED_DEPOT_PATH");
  system("/bin/chmod u+w $dynamic_perforce_dir -R");
  my $token_table_fspath = "$dynamic_perforce_dir$TOKEN_TABLE_BASED_DEPOT_PATH";

  open my $TOKEN_TABLE_FH, '<', $token_table_fspath
    or clean_die "redeem_config_tokens(): can't open token table for detokenization;",
                 " path => '$token_table_fspath': $!";
  my $token_table_lines = [ <$TOKEN_TABLE_FH> ];
  close $TOKEN_TABLE_FH
    or clean_die
         "redeem_config_tokens(): can't close token table file after reading for for",
         " detokenization; path => '$config_file_path': $!";

  my $redemption_values = {};
  my $redemption_id = lc $envid;

  my $redeem_results = redeem_tokens ({
                          template_data     => $config_file_lines,
                          token_table       => $token_table_lines,
                          redemption_values => $redemption_values,
                          redeem_for        => $redemption_id,
                          show_token_identifiers_and_values => 0,
                        });
  exists $redeem_results->{ error }
    and clean_die "error redeeming tokens; file => '$config_file_path';",
                  " redeeming for '$redemption_id' ;",
                  " redeem results => '$redeem_results->{ error }'";

  my $detokenized_data  = $redeem_results->{ detokenized_lines };
  $redemption_values = $redeem_results->{ redemption_values };

  open my $FH, '>', $config_file_path
      or clean_die "redeem_config_tokens(): can't open '$config_file_path'",
                   " for writing: $!";
  for my $line ( @$detokenized_data ) {
    if ( $line =~ /^# Build Tree ID: .*/ ) {
      $line =~ s/^(# Build Tree ID:) .*/$1 $branch_name/;
    }
    print $FH $line;
  }

  close $FH
    or logwarn "redeem_config_tokens(): can't close '$config_file_path'",
               " after writing: $!";

}

#------------------------------------------------------------------------
 # call logdie() with all arguments; call cleanup subroutine;
 # exit with a die return code
sub clean_die ( @ ) {

  cleanup();

       # now we fall on our sword...
  logdie( @_ );
} # clean_die

#-----------------------------------------------------------------------
sub cleanup {

  return;
} # cleanup

#-----------------------------------------------------------------------
     # handle signals; print signal name and then cleanly die
sub catch_signal {
  my $signame = shift;
  clean_die "caught SIG$signame";
} # catch_signal
