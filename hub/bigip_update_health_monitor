#!/usr/bin/perl
#
# Update the monitor for jboss secured.
#
# Usage: bigip_update_health_monitor [options]
#
# Options:
#  -e | --env               Specify the environment id to be updated. For example: srwd76.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  bigip_update_health_monitor -e srwd76
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/home/minjzhang/ops/util/lib';
use lib '/nas/reg/lib/perl';

use Getopt::Long;
use Log::Transcript;
use File::Temp;
use Stubhub::BigIP::System::Util qw (
                                    deploy_configuration
                                    download_configuration
                                    save_configuration
                                    get_icontrol
                                );
use Stubhub::BigIP::Pool::Handler qw (
                                    get_env_pool_list
                                );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $options_okay = GetOptions (
    'e|env=s'     => \$envid,
    'v|verbose'   => \$show_verbose,
    'h|help'      => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
    print <<END_OF_HELP
Update the monitor for jboss 6.

Usage: bigip_update_health_monitor [options]

Options:
 -e | --env               Specify the environment id to be updated. For example: srwd76.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 bigip_update_health_monitor -e srwd76

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $envid) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Main
#

my ( $internal_ic, $external_ic ) = get_icontrol( $envid );
my $tmpdir = File::Temp->newdir();

foreach my $intext ( "int", "ext" ) {
    my $bigip_conf_file_path = "$tmpdir/$envid-$intext-bigip.conf";
    my $bigip_conf_file_dest = "$tmpdir/$envid-$intext-bigip.conf.dest";

    my $iControl = $internal_ic;
    $iControl = $external_ic if $intext eq "ext";

    my @env_pools = get_env_pool_list( $iControl, $envid );

    logecho "Downloading configuration ...";
    download_configuration( $iControl, "/config/bigip.conf", "$bigip_conf_file_path");

    open BIGIP_CONF_FH, "<$bigip_conf_file_path"
        or die "Cannot open file $bigip_conf_file_path: $!";
    open BIGIP_CONF_DEST_FH, ">$bigip_conf_file_dest"
        or die "Cannot open file $bigip_conf_file_dest: $!";

    my $inpool = 0;
    while ( my $line = <BIGIP_CONF_FH> ) {
        if ( $inpool ) {
            chomp $line;
            if ( $line =~ /^}$/ ) {
                $inpool = 0;
            }
            $line =~ s/\bJBoss-JMX-GET_SSL_443\b/JBoss-Secured-SSL/;
            $line =~ s/\bJBoss6-JMX-GET_SSL_443\b/JBoss-Secured-SSL/;
            $line =~ s/\bJBoss-JMX-GET\b/JBoss-Secured-HTTP/;
            $line =~ s/\bJBoss6-JMX-GET\b/JBoss-Secured-HTTP/;
            $line =~ s/\bJBoss-JMX-GET_8080\b/JBoss-Secured-HTTP-8080/;
            $line =~ s/\bJK-Status-GET_SSL_443\b/JBoss-Secured-SSL/;
            print BIGIP_CONF_DEST_FH "$line\n";
        }
        if ( $line =~ /^pool\s+.*\s+{\s*/ ) {
            my $pool = $line;
            $pool =~ s/^pool\s+(.*)\s+{\s*/$1/;
            if ( grep $_ eq $pool, @env_pools ) {
                $inpool = 1;
                print BIGIP_CONF_DEST_FH "$line\n";
            }
        }
    }

    close BIGIP_CONF_FH;
    close BIGIP_CONF_DEST_FH;

    logecho "Deploying $bigip_conf_file_dest to $envid ...";
    deploy_configuration( $envid, $intext, $iControl, $bigip_conf_file_dest, $show_verbose);
    logecho "Saving configuration ...";
    save_configuration( $iControl );
}

exit 0;
