#!/usr/bin/perl
#
# Check the ActiveMQ including:
# - MQM
# - LCM
#
# Usage: check_activemq [options]
#
# Options:
#  -e | --envid             Specify the environment ID. For example: srwd83.
#  -s | --showignore        Show the ignore queues.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
# check_activemq -e srwd83
# check_activemq -e srwd83 -s
#
# Author: minjzhang
#

use strict;
use warnings;
use Carp;
use Getopt::Long;

# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/reg/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Data::Dumper;
use Readonly;
use HTML::TableExtract;
use Stubhub::Log::Util qw (
                            init
                            get_logger_with_loglevel
                        );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $show_ignore = qw{};
my $options_okay = GetOptions (
    'e|envid=s'    => \$envid,
    's|showignore' => \$show_ignore,
    'v|verbose'    => \$show_verbose,
    'h|help'       => \$show_usage,
);

#
# Initiate log instance
#
Stubhub::Log::Util->init();
our $logger = get_logger_with_loglevel( $show_verbose );

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
    print <<END_OF_HELP
Check the ActiveMQ including:
- MQM
- LCM

Usage: check_activemq [options]

Options:
 -e | --envid             Specify the environment ID. For example: srwd83.
 -s | --showignore        Show the ignore queues.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
check_activemq -e srwd83
check_activemq -e srwd83 -s

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $envid ) {
    $logger->error( "The pamameter '-e' must be set.\n" );
    usage();
    exit 1;
}

#
# Get the ActiveMQ queues status.
# Return the reference of @queues.
#
sub get_activemq_queue {
    my ( $activemq_queue_url ) = @_;
    Readonly my $CURL_COMMAND => '/usr/bin/curl';
    my $html_string = `$CURL_COMMAND "$activemq_queue_url" 2> /dev/null`;
    my $te = HTML::TableExtract->new( depth => 1 );
    $te->parse( $html_string );

    my @queues;
    foreach my $ts ( $te->tables ) {
        my $is_header = 1;
        foreach my $row_ref ($ts->rows) {
            if ( $is_header ) {
                $is_header = 0;
                next;
            }
            my %queue;
            $queue{ 'name' } = _trim_queue_name( _trim_string( @{ $row_ref }[0] ) );
            $queue{ 'pending' } = _trim_string( @{ $row_ref }[1] );
            $queue{ 'consumer' } = _trim_string( @{ $row_ref }[2] );
            $queue{ 'enqueued' } = _trim_string( @{ $row_ref }[3] );
            $queue{ 'dequeued' } = _trim_string( @{ $row_ref }[4] );

            push @queues, \%queue;
        }
    }
    return \@queues;
}

#
# Get the ActiveMQ durable topic subscribers status.
# Return the reference of @subscribers.
#
sub get_activemq_subscribers {
    my ( $activemq_subscriber_url ) = @_;
    Readonly my $CURL_COMMAND => '/usr/bin/curl';
    my $html_string = `$CURL_COMMAND "$activemq_subscriber_url" 2> /dev/null`;
    my $te = HTML::TableExtract->new( depth => 1 );
    $te->parse( $html_string );

    my @subscribers;
    foreach my $ts ( $te->tables ) {
        my $is_header = 1;
        foreach my $row_ref ($ts->rows) {
            if ( $is_header ) {
                $is_header = 0;
                if ( @{ $row_ref }[0] !~ /Client ID/ ) {
                    last;
                } else {
                    next;
                }
            }
            my %subscriber;
            $subscriber{ 'client' } = _trim_queue_name( _trim_string( @{ $row_ref }[0] ) );
            $subscriber{ 'subscription' } = _trim_queue_name( _trim_string( @{ $row_ref }[1] ) );
            $subscriber{ 'pending' } = _trim_string( @{ $row_ref }[5] );
            $subscriber{ 'dispatched' } = _trim_string( @{ $row_ref }[7] );
            $subscriber{ 'enqueued' } = _trim_string( @{ $row_ref }[8] );
            $subscriber{ 'dequeued' } = _trim_string( @{ $row_ref }[9] );

            push @subscribers, \%subscriber;
        }
    }
    return \@subscribers;

}

#
# Validate the following items for the queue:
# - Have consumers
# - No pending messages
#
sub validate_queue {
    my ( $queues_ref, $mq_server, $expected_number ) = @_;
    my $success = 1;
    $success = 0 if not _validate_queues_number( $queues_ref, $mq_server, $expected_number );
    foreach my $queue_ref ( @{ $queues_ref } ) {
        $success = 0 if not _validate_queue_consumer( $queue_ref, $mq_server );
        $success = 0 if not _validate_queue_pending( $queue_ref, $mq_server );
    }
    return $success;
}

#
# Return true if the queue name is in queue ignore list.
#
sub _is_in_queue_ignore_list {
    my ( $queue_name ) = @_;
    my %ignore_list = (
        'DLQ.Consumer.eventLifeCycle.classifiedAds' => 1,
        'DLQ.com.stubhub.predelivery.TMListingPreDeliveryQueue' => 1,
        'DLQ.com.stubhub.predelivery.TDCListingPreDeliveryQueue' => 1,
        'DLQ.Consumer.orderLifeCycle.pendingConfirmNotification' => 1,
        'Consumer.eventLifeCycle' => 1,
    );
    if ( exists( $ignore_list{ "$queue_name"} ) ) {
        return 1;
    } else {
        return 0;
    }
}

#
# Validate number of pending messages in the queue.
#
sub _validate_queue_pending {
    my ( $queue_ref, $mq_server ) = @_;
    my $success = 1;
    if ( $queue_ref->{ 'pending' } > 0 ) {
        if ( _is_in_queue_ignore_list( $queue_ref->{ 'name' } ) ) {
            $logger->warn( "[$mq_server] Pending message for queue $queue_ref->{ 'name' }: $queue_ref->{ 'pending' }" ) if $show_ignore;
        } else {
            $logger->error( "[$mq_server] Pending message for queue $queue_ref->{ 'name' }: $queue_ref->{ 'pending' }" );
            $success = 0;
        }
    }
    return $success;
}

#
# Validate number of consumer in the queue.
#
sub _validate_queue_consumer {
    my ( $queue_ref, $mq_server ) = @_;
    my $success = 1;
    if ( $queue_ref->{ 'consumer' } == 0 ) {
        if ( _is_in_queue_ignore_list( $queue_ref->{ 'name' } ) ) {
            $logger->warn( "[$mq_server] Number of consumer for queue $queue_ref->{ 'name' }: $queue_ref->{ 'consumer' }" ) if $show_ignore;
        } else {
            $logger->error( "[$mq_server] Number of consumer for queue $queue_ref->{ 'name' }: $queue_ref->{ 'consumer' }" );
            $success = 0;
        }
    }
    return $success;
}

#
# Validate the following items for the subscribers:
# - The number of the subscribers.
# - No pending messages.
#
sub validate_subscriber {
    my ( $subscribers_ref, $mq_server, $expected_number ) = @_;
    my $success = 1;
    $success = 0 if not _validate_subscribers_number( $subscribers_ref, $mq_server, $expected_number );
    foreach my $subscriber_ref ( @{ $subscribers_ref } ) {
        $success = 0 if not _validate_subscriber_pending( $subscriber_ref, $mq_server );
    }
    return $success;
}

#
# Validate the number of the consumers.
#
sub _validate_queues_number {
    my ( $queues_ref, $mq_server, $expected_number ) = @_;
    my $queue_number = scalar @{ $queues_ref };
    if ( $queue_number >= $expected_number ) {
        return 1;
    } else {
        $logger->error( "[$mq_server] The number of queues is less than expected [$expected_number]: $queue_number" );
        return 0;
    }
}

#
# Validate the number of the subscribers.
#
sub _validate_subscribers_number {
    my ( $subscribers_ref, $mq_server, $expected_number ) = @_;
    my $subscribers_number = scalar @{ $subscribers_ref };
    if ( $subscribers_number >= $expected_number ) {
        return 1;
    } else {
        $logger->error( "[$mq_server] The number of subscribers is less than expected [$expected_number]: $subscribers_number" );
        return 0;
    }
}

#
# Validate number of pending messages in the subscriber.
#
sub _validate_subscriber_pending {
    my ( $subscriber_ref, $mq_server ) = @_;
    my $success = 1;
    if ( $subscriber_ref->{ 'pending' } > 0 ) {
        $logger->error( "[$mq_server] Pending message for subscriber $subscriber_ref->{ 'client' }: $subscriber_ref->{ 'pending' }" );
        $success = 0;
    }
    return $success;
}

#
# Trim the name of queue.
#
sub _trim_queue_name {
    my ( $string ) = @_;
    $string =~ s/.*\.\.\.\s+(.*)/$1/;
    return $string;
}

#
# Trim the string for heading and trailing spaces and line separators.
#
sub _trim_string {
    my ( $string ) = @_;
    $string =~ s/\n//g;
    $string =~ s/\r//g;
    $string =~ s/^\s+(.*)\s+$/$1/;
    return $string;
}

#
# Get the number of LCX hosts.
#
sub get_lcx_number {
    my ( $envid ) = @_;
    Readonly my $GREP_COMMAND => '/bin/grep';
    Readonly my $DEV_QA_HOSTS => '/nas/reg/etc/dev-qa-hosts';
    my $lcx_hosts = `$GREP_COMMAND $envid $DEV_QA_HOSTS | $GREP_COMMAND lcx`;
    my @hosts = split "\n", $lcx_hosts;
    return scalar @hosts;
}

#
# Main
#

my $success = 1;

my $mqm_activemq_url = "http://${envid}mqm001.${envid}.com:8161/admin/queues.jsp";
my $mqm_queues_ref = get_activemq_queue( $mqm_activemq_url );
$success = 0 if not validate_queue( $mqm_queues_ref, "MQM", 50 );

my $lcm_activemq_url = "http://${envid}lcm001.${envid}.com:8161/admin/queues.jsp";
my $lcm_queues_ref = get_activemq_queue( $lcm_activemq_url );
$success = 0 if not validate_queue( $lcm_queues_ref, "LCM", 7 );

my $lcm_activemq_subscribers_url = "http://${envid}lcm001.${envid}.com:8161/admin/subscribers.jsp";
my $lcm_subscribers_ref = get_activemq_subscribers( $lcm_activemq_subscribers_url );
my $lcx_number = get_lcx_number( $envid );
my $subscribers_expected_number = 8 * $lcx_number;
$success = 0 if not validate_subscriber( $lcm_subscribers_ref, "LCM", $subscribers_expected_number );

exit 0 if $success;
exit 1;
