#!/usr/bin/perl
#
# Deploy F5 BIG-IP resources to the target environment.
# Following items will be deployed:
#  - Virtual Server
#  - Pool
#  - iRule
#
# Usage: deploy_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use MIME::Base64;
use File::Temp;
use Log::Transcript;
use BigIP::iControl;
use Stubhub::ENV::Info qw (
                            get_env_branch
                          );
use Stubhub::P4::Client qw (
                            check_out_perfoce_file
                            clean_perforce_client
                           );
use Stubhub::BigIP::Virtual::ConfigGenerator qw (
                            generate_vs_configs
                            generate_pub_vs_configs
                           );
use Stubhub::BigIP::Pool::ConfigGenerator qw (
                            generate_pool_configs
                           );
use Stubhub::BigIP::System::Util qw (
                            get_icontrol
                            deploy_configuration
                            save_configuration
                            download_configuration
                           );
use Stubhub::BigIP::System::Info qw (
                            get_bigip_server
                           );
use Stubhub::BigIP::Virtual::Handler qw (
                            delete_env_virtual_servers
                           );
use Stubhub::BigIP::Rule::Handler qw (
                            delete_env_rules
                           );
use Stubhub::BigIP::Pool::Handler qw (
                            delete_env_pools
                           );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $branch = qw{};
my $options_okay = GetOptions (
   'e|env=s'     => \$envid,
   'b|branch=s'  => \$branch,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Deploy F5 BIG-IP resources to the target environment.
Following items will be deployed:
 - Virtual Server
 - Pool
 - iRule

Usage: deploy_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 deploy_bigip -e srwd76 -b rb_ecomm_13_6

END_OF_HELP
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Generate configuration file based on the template,
# including virtual server, pool.
#
sub generate_configuration {
    my ( $env_id, $branch_name, $tmpdir, $intext ) = @_;
    my $p4_f5_dir = qw{};
    my $p4_f5_subdir = "templates/fsroot/etc/stubhub/f5";
    if ( $branch_name eq "main" ) {
        $p4_f5_dir = "/depot/main/$p4_f5_subdir";
    } elsif ( $branch_name =~ m/^rb_/ ) {
        $p4_f5_dir = "/depot/release/$branch_name/$p4_f5_subdir";
    } elsif ( $branch_name =~ m/^pb_/ ) {
        $p4_f5_dir = "/depot/project/$branch_name/$p4_f5_subdir";
    } else {
        logecho "Error: Branch name $branch_name doesn't look good.\n";
        exit 1;
    }
    my ( $dynamic_perforce_client, $dynamic_perfoce_dir )
        = check_out_perfoce_file("/$p4_f5_dir/...");
    
    my $vs_file;
    if ( $intext eq "ext" ) {
        # TODO testing
        $vs_file = generate_pub_vs_configs( "$dynamic_perfoce_dir$p4_f5_dir/virtuals/$intext",
            "/nas/home/minjzhang/temp/public-ip", $envid, "$tmpdir" );
    }
    $vs_file = generate_vs_configs( "$dynamic_perfoce_dir$p4_f5_dir/virtuals/$intext", $envid, "$tmpdir" );
    my $pool_file = generate_pool_configs( "$dynamic_perfoce_dir$p4_f5_dir/pools/$intext", $envid, "$tmpdir" );
    clean_perforce_client( $dynamic_perforce_client, $dynamic_perfoce_dir );
    return ( $vs_file, $pool_file );
}

#
# Parameter validation
#
if ( ! defined $envid or ! defined $branch) {
    logecho "Error: The pamameter '-e' and '-b' must be set.\n";
    usage();
    exit 1;
}

#
# Get the timestamp.
#
sub get_timestamp {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $timestamp = sprintf ( "%04d%02d%02d%02d%02d",
        $year+1900,$mon+1,$mday,$hour,$min);
    return $timestamp;
}

#
# Main
#
my ( $internal_ic, $external_ic ) = get_icontrol( $envid );

# Backup the configuration file.
my $internal_bigip_server = get_bigip_server( $envid, "int" );
my $external_bigip_server = get_bigip_server( $envid, "int" );
download_configuration( $internal_ic, '/config/bigip.conf', "/nas/home/minjzhang/temp/$internal_bigip_server-internal-bigip.conf." . get_timestamp() );
download_configuration( $external_ic, '/config/bigip.conf', "/nas/home/minjzhang/temp/$external_bigip_server-external-bigip.conf." . get_timestamp() );

# Remove the virtual servers, rules and pools for specific environment.
logecho "Deleting virtual servers for $envid ...\n";
delete_env_virtual_servers( $internal_ic, $envid );
delete_env_virtual_servers( $external_ic, $envid );
logecho "Deleting rules for $envid ...\n";
delete_env_rules( $internal_ic, $envid );
delete_env_rules( $external_ic, $envid );
logecho "Deleting pools for $envid ...\n";
delete_env_pools( $internal_ic, $envid );
delete_env_pools( $external_ic, $envid );

# Deploy virtual servers, rules and pools for specific environment.
my $int_tmpdir = File::Temp->newdir();
my $ext_tmpdir = File::Temp->newdir();
logecho "Generating virtual server, pool configuration files ...\n";
my ($external_vs_conf, $external_pool_conf) = generate_configuration( $envid, $branch, $ext_tmpdir, "ext" );
my ($internal_vs_conf, $internal_pool_conf) = generate_configuration( $envid, $branch, $int_tmpdir, "int" );
logecho "Deploying pools for $envid ...\n";
deploy_configuration( $envid, "int", $internal_ic, $internal_pool_conf, $show_verbose);
deploy_configuration( $envid, "ext", $external_ic, $external_pool_conf, $show_verbose);
# TODO for testing
system("/nas/home/minjzhang/bin/deploy-irules -e $envid -b $branch");
logecho "Deploying virtual servers for $envid ...\n";
deploy_configuration( $envid, "int", $internal_ic, $internal_vs_conf, $show_verbose);
deploy_configuration( $envid, "ext", $external_ic, $external_vs_conf, $show_verbose);

save_configuration( $internal_ic );
save_configuration( $external_ic );

exit 0;
