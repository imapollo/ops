#!/usr/bin/perl
#
# Deploy F5 BIG-IP resources to the target environment.
# Following items will be deployed:
#  - Virtual Server
#  - Pool
#  - iRule
#
# Usage: deploy_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
#  -p | --onlypool          Deploy pools only. Will not delete pools at first.
#  -r | --onlyirule         Deploy irules only. Will not delete irules at first.
#  -s | --onlyvs            Deploy virtual servers only. Will not delete virtual servers at first.
#     | --poolname          Only deploy the specified pool.
#     | --rulename          Only deploy the specified pool.
#     | --vsname            Only deploy the specified virtual server.
#     | --includepool       Specify which of the pools need to be included for deployment.
#                           Multiple pools need to be separated by comma.
#     | --includevs         Specify which of the virtual servers need to be included for deployment.
#                           Multiple virtuals need to be separated by comma.
#     | --noclean           Not clean up the virtual servers, irules, pools for the environment at first step.
#  -i | --ignoresave        Skip save and sync configurations after loading.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6 -p
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6 --includevs cti,cti-ssl
#

use strict;
use warnings;

use lib '/nas/home/minjzhang/ops/util/lib';
use Stubhub::Util::Host qw (
                            get_ip_by_hostname
                           );

use lib '/nas/reg/lib/perl';
# use lib '/nas/utl/devops/lib/perl';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use MIME::Base64;
use File::Temp;
use BigIP::iControl;
use Stubhub::ENV::Info qw (
                            get_env_branch
                          );
use Stubhub::P4::Client qw (
                            check_out_perforce_file
                            clean_perforce_client
                           );
use Stubhub::BigIP::Virtual::ConfigGenerator qw (
                            generate_not_excluded_vs_configs
                            generate_pub_not_excluded_vs_configs
                           );
use Stubhub::BigIP::Pool::ConfigGenerator qw (
                            generate_not_excluded_pool_configs
                           );
use Stubhub::BigIP::System::Util qw (
                            get_bigip
                            get_icontrol
                            deploy_configuration
                            save_configuration
                            download_configuration
                            sync_configuration
                           );
use Stubhub::BigIP::System::Info qw (
                            get_bigip_server
                            get_exclude_list
                           );
use Stubhub::BigIP::Virtual::Handler qw (
                            delete_env_virtual_servers
                            delete_not_excluded_env_virtual_servers
                           );
use Stubhub::BigIP::Rule::Handler qw (
                            delete_env_rules
                           );
use Stubhub::BigIP::Pool::Handler qw (
                            delete_env_pools
                            delete_not_excluded_env_pools
                           );
use Stubhub::Log::Util qw (
                            init
                            get_logger
                            get_logger_with_loglevel
                            add_syslog_appender
                           );

my @args = @ARGV;

# Get options
my $show_usage = qw{};
my $show_verbose = 0;
my $envid = qw{};
my $branch = qw{};
my $including_vs = qw{};
my $including_pool = qw{};
my $only_pool = qw{};
my $only_irule = qw{};
my $only_vs = qw{};
my $only_pool_name = qw{};
my $only_rule_name = qw{};
my $only_vs_name = qw{};
my $no_clean = qw{};
my $ignore_save = qw{};
my $options_okay = GetOptions (
   'e|env=s'         => \$envid,
   'b|branch=s'      => \$branch,
   'p|onlypool'      => \$only_pool,
   'r|onlyirule'     => \$only_irule,
   's|onlyvs'        => \$only_vs,
   'includepool=s'   => \$including_pool,
   'includevs=s'     => \$including_vs,
   'poolname=s'      => \$only_pool_name,
   'rulename=s'      => \$only_rule_name,
   'vsname=s'        => \$only_vs_name,
   'noclean'         => \$no_clean,
   'i|ignoresave'    => \$ignore_save,
   'v|verbose'       => \$show_verbose,
   'h|help'          => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

Stubhub::Log::Util->init();
our $logger = get_logger_with_loglevel( $show_verbose );
add_syslog_appender( $logger, "deploy_bigip", "$envid" );

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Deploy F5 BIG-IP resources to the target environment.
Following items will be deployed:
 - Virtual Server
 - Pool
 - iRule

Usage: deploy_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
 -p | --onlypool          Deploy pools only. Will not delete pools at first.
 -r | --onlyirule         Deploy irules only. Will not delete irules at first.
 -s | --onlyvs            Deploy virtual servers only. Will not delete virtual servers at first.
    | --poolname          Only deploy the specified pool. Multiple pools need to be separated by comma.
    | --rulename          Only deploy the specified irule. Multiple irules need to be separated by comma.
    | --vsname            Only deploy the specified virtual server. Multiple vs need to be separated by comma.
    | --includepool       Specify which of the pools need to be included for deployment.
                          Multiple pools need to be separated by comma.
    | --includevs         Specify which of the virtual servers need to be included for deployment.
                          Multiple virtuals need to be separated by comma.
    | --noclean           Not clean up the virtual servers, irules, pools for the environment at first step.
 -i | --ignoresave        Skip save and sync configurations after loading.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 deploy_bigip -e srwd76 -b rb_ecomm_13_6
 deploy_bigip -e srwd76 -b rb_ecomm_13_6 -p
 deploy_bigip -e srwd76 -b rb_ecomm_13_6 --includevs cti,cti-ssl

END_OF_HELP
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Generate configuration file based on the template,
# including virtual server, pool.
#
sub generate_configuration {
    my ( $env_id, $branch_name, $tmpdir, $intext, $excluded_vs_ref, $excluded_pool_ref, $only_include_vs_ref, $only_include_pool_ref, $bigip_ref ) = @_;

    Readonly my $F5_REPOSITORY => "Stubhub/f5";
    Readonly my $CHECKOUT_PATH => "/nas/reg/f5";

    my $checkout_path = "$CHECKOUT_PATH/$branch_name-" . get_timestamp();
    $logger->info( "Checking out from [$F5_REPOSITORY] to [$checkout_path]." );
    if ( $branch_name eq "main" ) {
        system( "/nas/utl/devops/bin/git_checkout -r $F5_REPOSITORY -p $checkout_path" );
    } else {
        system( "/nas/utl/devops/bin/git_checkout -r $F5_REPOSITORY -p $checkout_path -b $branch_name" );
    }

    $logger->info( "Checkout finished from [$F5_REPOSITORY]." );

    Readonly my $PUBLIC_IP_LIST => '/internal/devops/network/bigip/public_virtual_server_ip.lst';
    my ( $public_ip_chkout_client, $public_ip_list_dir )
        = check_out_perforce_file( "/$PUBLIC_IP_LIST" );

    my $vs_file;
    if ( $intext eq "ext" ) {
        $vs_file = generate_pub_not_excluded_vs_configs( "$checkout_path/virtuals/$intext",
            "$public_ip_list_dir$PUBLIC_IP_LIST", $envid, "$tmpdir", $excluded_vs_ref, $only_include_vs_ref, $bigip_ref );
    }
    $vs_file = generate_not_excluded_vs_configs( "$checkout_path/virtuals/$intext", $envid, "$tmpdir", $excluded_vs_ref, $only_include_vs_ref, $bigip_ref );
    my $pool_file = generate_not_excluded_pool_configs( "$checkout_path/pools/$intext", $envid, "$tmpdir", $excluded_pool_ref, $only_include_pool_ref, $bigip_ref );
    # Sleep for 10 seconds to allow /nas/reg/f5 sync.
    sleep 15;
    system( "/bin/rm -rf $checkout_path" );
    sleep 15;
    clean_perforce_client( $public_ip_chkout_client, $public_ip_list_dir);
    return ( $vs_file, $pool_file );
}

#
# Parameter validation
#
if ( ! defined $envid or ! defined $branch) {
    $logger->error( "The pamameter '-e' and '-b' must be set." );
    usage();
    exit 1;
}

#
# Get the timestamp.
#
sub get_timestamp {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $timestamp = sprintf ( "%04d%02d%02d%02d%02d",
        $year+1900,$mon+1,$mday,$hour,$min);
    return $timestamp;
}

#
# Filter the including array list.
#
sub filter_list {
    my ( $include_array_ref, $exclude_array_ref ) = @_;
    my @final_list;
    foreach my $excluded ( @{ $exclude_array_ref } ) {
        my $include = 0;
        foreach my $included ( @{ $include_array_ref } ) {
            if ( $included eq $excluded ) {
                $include = 1;
            }
        }
        if ( ! $include ) {
            push @final_list, $excluded;
        }
    }
    return @final_list;
}

#
# Check the lock file for the environment.
#
sub check_deployment_lock {
    my ( $envid ) = @_;
    Readonly my $BIGIP_DEPLOYMENT_LOCK_DIR => '/nas/reg/log/bigip';
    my $lock_file = "$BIGIP_DEPLOYMENT_LOCK_DIR/$envid.pid";
    if ( -e $lock_file ) {
        my $pid = `/bin/cat $lock_file`;
        chomp $pid;
        $logger->logdie( "Already have a process to deploy $envid: $pid. If the process is already finished, please remove $lock_file and then start another deployment." );
    } else {
        system("/bin/echo $$ > $lock_file");
    }
    return $lock_file;
}

#
# Remove lock and exit the process.
#
sub clean_and_exit {
    my $bigip_lock_file = @_;
    system( "/bin/rm $bigip_lock_file" );
    exit 1;
}

#
# Print the command summary.
#
sub print_command_begin {
    my ( $logger, $command, $envid, $args_ref ) = @_;
    $logger->info( "$command starts on $envid ..." );
    my $arguments = join " ", @{ $args_ref };
    $logger->info( "Command: $command $arguments");
}

#
# Main
#
print_command_begin( $logger, "deploy_bigip", $envid, \@args );
my $bigip_refs = get_bigip( $envid );
my $bigip_lock_file = check_deployment_lock( $envid );
my $internal_bigip_ref = $bigip_refs->{ "int" };
my $external_bigip_ref = $bigip_refs->{ "ext" };

# Backup the configuration file.
system("/usr/bin/sudo /bin/mkdir -p /var/log/bigip");
system("/usr/bin/sudo /bin/chmod ugo+w /var/log/bigip");
download_configuration( $internal_bigip_ref, '/config/bigip.conf', "/var/log/bigip/$internal_bigip_ref->{ 'server' }-int-bigip.conf." . get_timestamp() );
download_configuration( $external_bigip_ref, '/config/bigip.conf', "/var/log/bigip/$external_bigip_ref->{ 'server' }-ext-bigip.conf." . get_timestamp() );

my @internal_excluded_vs = get_exclude_list( $envid, "internal", "virtual" );
my @external_excluded_vs = get_exclude_list( $envid, "external", "virtual" );
my @internal_excluded_pool = get_exclude_list( $envid, "internal", "pool" );
my @external_excluded_pool = get_exclude_list( $envid, "external", "pool" );

my @include_vs = split ",", $including_vs if defined $including_vs;
my @include_pool = split ",", $including_pool if defined $including_pool;
my @only_include_vs = split ",", $only_vs_name if defined $only_vs_name;
my @only_include_pool = split ",", $only_pool_name if defined $only_pool_name;
my @final_internal_excluded_vs = filter_list( \@include_vs, \@internal_excluded_vs );
my @final_external_excluded_vs = filter_list( \@include_vs, \@external_excluded_vs );
my @final_internal_excluded_pool = filter_list( \@include_pool, \@internal_excluded_pool );
my @final_external_excluded_pool = filter_list( \@include_pool, \@external_excluded_pool );

my $deploy_all = 1;
$deploy_all = 0 if ( $only_vs or $only_irule or $only_pool or $only_pool_name or $only_vs_name or $only_rule_name );

if ( $deploy_all and not $no_clean ) {
    # Remove the virtual servers, rules and pools for specific environment.
    $logger->info( "Deleting virtual servers for $envid ..." );
    delete_not_excluded_env_virtual_servers( $external_bigip_ref, $envid, @final_external_excluded_vs );
    delete_not_excluded_env_virtual_servers( $internal_bigip_ref, $envid, @final_internal_excluded_vs );
    $logger->info( "Deleting rules for $envid ..." );
    delete_env_rules( $internal_bigip_ref, $envid );
    delete_env_rules( $external_bigip_ref, $envid );
    $logger->info( "Deleting pools for $envid ..." );
    delete_not_excluded_env_pools( $external_bigip_ref, $envid, @final_external_excluded_pool );
    delete_not_excluded_env_pools( $internal_bigip_ref, $envid, @final_internal_excluded_pool );
}

# Deploy virtual servers, rules and pools for specific environment.
my $int_tmpdir = File::Temp->newdir();
my $ext_tmpdir = File::Temp->newdir();
$logger->info( "Generating virtual server, pool configuration files ..." );
my ($external_vs_conf, $external_pool_conf) = generate_configuration( $envid, $branch, $ext_tmpdir, "ext", \@final_external_excluded_vs, \@final_external_excluded_pool, \@only_include_vs, \@only_include_pool, $external_bigip_ref );
my ($internal_vs_conf, $internal_pool_conf) = generate_configuration( $envid, $branch, $int_tmpdir, "int", \@final_internal_excluded_vs, \@final_internal_excluded_pool, \@only_include_vs, \@only_include_pool, $internal_bigip_ref );

my $deploy_success = 0;

if ( $only_pool_name or $only_pool or $deploy_all ) {
    $logger->info( "Deploying pools for $envid ..." );
    $deploy_success = deploy_configuration( $envid, "ext", $external_bigip_ref, $external_pool_conf ) if ( -e $external_pool_conf );
    clean_and_exit( $bigip_lock_file ) if $deploy_success != 0;
    $deploy_success = deploy_configuration( $envid, "int", $internal_bigip_ref, $internal_pool_conf ) if ( -e $internal_pool_conf );
    clean_and_exit( $bigip_lock_file ) if $deploy_success != 0;
}
if ( $only_rule_name or $only_irule or $deploy_all ) {
    $logger->info("Deploying irules for $envid ...");
    # system("/nas/utl/devops/bin/deploy-irules -e $envid -b $branch");
    if ( defined $only_rule_name ) {
        system("/nas/home/minjzhang/bin/deploy-irules -e $envid -b $branch -r $only_rule_name");
    } else {
        system("/nas/home/minjzhang/bin/deploy-irules -e $envid -b $branch");
    }
}
if ( $only_vs_name or $only_vs or $deploy_all ) {
    $logger->info("Deploying virtual servers for $envid ...");
    $deploy_success = deploy_configuration( $envid, "ext", $external_bigip_ref, $external_vs_conf ) if ( -e $external_vs_conf );
    clean_and_exit( $bigip_lock_file ) if $deploy_success != 0;
    $deploy_success = deploy_configuration( $envid, "int", $internal_bigip_ref, $internal_vs_conf ) if ( -e $internal_vs_conf );
    clean_and_exit( $bigip_lock_file ) if $deploy_success != 0;
}

if ( not $ignore_save ) {
    save_configuration( $internal_bigip_ref );
    save_configuration( $external_bigip_ref );
    sync_configuration( $internal_bigip_ref, $envid, "int" );
    sync_configuration( $external_bigip_ref, $envid, "ext" );
}

system( "/bin/rm $bigip_lock_file" );

if ( scalar @final_internal_excluded_vs > 0
        or scalar @final_external_excluded_vs > 0
        or scalar @final_internal_excluded_pool > 0
        or scalar @final_external_excluded_pool > 0) {
    $logger->info( "===================================" );
    $logger->info( "Following BigIP objects are excluded during the deployment." );
    $logger->info( "Please use '--includepool' or '--includevs' option to deploy them:" );
    if ( $only_vs or $deploy_all ) {
        $logger->info( "Internal virtual servers: " . join(',', @final_internal_excluded_vs) ) if scalar @final_internal_excluded_vs > 0;
        $logger->info( "External virtual servers: " . join(',', @final_external_excluded_vs) ) if scalar @final_external_excluded_vs > 0;
    }
    if ( $only_pool or $deploy_all ) {
        $logger->info( "Internal pools: " . join(',', @final_internal_excluded_pool) ) if scalar @final_internal_excluded_pool > 0;
        $logger->info( "External pools: " . join(',', @final_external_excluded_pool) ) if scalar @final_external_excluded_pool > 0;
    }
}

exit 0;
