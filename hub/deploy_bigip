#!/usr/bin/perl
#
# Deploy F5 BIG-IP resources to the target environment.
# Following items will be deployed:
#  - Virtual Server
#  - Pool
#  - iRule
#
# Usage: deploy_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
#  -p | --includepool       Specify which of the pools need to be included for deployment.
#                           Multiple pools need to be separated by comma.
#  -s | --includevs         Specify which of the virtual servers need to be included for deployment.
#                           Multiple virtuals need to be separated by comma.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6
#  deploy_bigip -e srwd76 -b rb_ecomm_13_6 -s cti,cti-ssl
#

use strict;
use warnings;

use lib '/nas/home/minjzhang/ops/util/lib';
use lib '/nas/reg/lib/perl';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use MIME::Base64;
use File::Temp;
use Log::Transcript;
use BigIP::iControl;
use Stubhub::ENV::Info qw (
                            get_env_branch
                          );
use Stubhub::P4::Client qw (
                            check_out_perfoce_file
                            clean_perforce_client
                           );
use Stubhub::BigIP::Virtual::ConfigGenerator qw (
                            generate_vs_configs
                            generate_pub_vs_configs
                            generate_not_excluded_vs_configs
                            generate_pub_not_excluded_vs_configs
                           );
use Stubhub::BigIP::Pool::ConfigGenerator qw (
                            generate_pool_configs
                            generate_not_excluded_pool_configs
                           );
use Stubhub::BigIP::System::Util qw (
                            get_icontrol
                            deploy_configuration
                            save_configuration
                            download_configuration
                           );
use Stubhub::BigIP::System::Info qw (
                            get_bigip_server
                            get_exclude_list
                           );
use Stubhub::BigIP::Virtual::Handler qw (
                            delete_env_virtual_servers
                            delete_not_excluded_env_virtual_servers
                           );
use Stubhub::BigIP::Rule::Handler qw (
                            delete_env_rules
                           );
use Stubhub::BigIP::Pool::Handler qw (
                            delete_env_pools
                            delete_not_excluded_env_pools
                           );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $branch = qw{};
my $including_vs = qw{};
my $including_pool = qw{};
my $options_okay = GetOptions (
   'e|env=s'         => \$envid,
   'b|branch=s'      => \$branch,
   'p|includepool=s' => \$including_pool,
   's|includevs=s'   => \$including_vs,
   'v|verbose'       => \$show_verbose,
   'h|help'          => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Deploy F5 BIG-IP resources to the target environment.
Following items will be deployed:
 - Virtual Server
 - Pool
 - iRule

Usage: deploy_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -b | --branch            Specify the branch name. For example: rb_ecomm_13_6.
 -p | --includepool       Specify which of the pools need to be included for deployment.
                          Multiple pools need to be separated by comma.
 -s | --includevs         Specify which of the virtual servers need to be included for deployment.
                          Multiple virtuals need to be separated by comma.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 deploy_bigip -e srwd76 -b rb_ecomm_13_6
 deploy_bigip -e srwd76 -b rb_ecomm_13_6 -s cti,cti-ssl

END_OF_HELP
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Generate configuration file based on the template,
# including virtual server, pool.
#
sub generate_configuration {
    my ( $env_id, $branch_name, $tmpdir, $intext, $excluded_vs_ref, $excluded_pool_ref ) = @_;
    my $p4_f5_dir = qw{};
    my $p4_f5_subdir = "templates/fsroot/etc/stubhub/f5";
    if ( $branch_name eq "main" ) {
        $p4_f5_dir = "/depot/main/$p4_f5_subdir";
    } elsif ( $branch_name =~ m/^rb_/ ) {
        $p4_f5_dir = "/depot/release/$branch_name/$p4_f5_subdir";
    } elsif ( $branch_name =~ m/^pb_/ ) {
        $p4_f5_dir = "/depot/project/$branch_name/$p4_f5_subdir";
    } else {
        logecho "Error: Branch name $branch_name doesn't look good.\n";
        exit 1;
    }
    my ( $dynamic_perforce_client, $dynamic_perforce_dir )
        = check_out_perfoce_file( "/$p4_f5_dir/..." );

    Readonly my $PUBLIC_IP_LIST => '/internal/devops/network/bigip/public_virtual_server_ip.lst';
    my ( $public_ip_chkout_client, $public_ip_list_dir )
        = check_out_perfoce_file( "/$PUBLIC_IP_LIST" );

    my $vs_file;
    if ( $intext eq "ext" ) {
        $vs_file = generate_pub_not_excluded_vs_configs( "$dynamic_perforce_dir$p4_f5_dir/virtuals/$intext",
            "$public_ip_list_dir$PUBLIC_IP_LIST", $envid, "$tmpdir", @{ $excluded_vs_ref } );
    }
    $vs_file = generate_not_excluded_vs_configs( "$dynamic_perforce_dir$p4_f5_dir/virtuals/$intext", $envid, "$tmpdir", @{ $excluded_vs_ref } );
    my $pool_file = generate_not_excluded_pool_configs( "$dynamic_perforce_dir$p4_f5_dir/pools/$intext", $envid, "$tmpdir", @{ $excluded_pool_ref } );
    clean_perforce_client( $dynamic_perforce_client, $dynamic_perforce_dir );
    clean_perforce_client( $public_ip_chkout_client, $public_ip_list_dir);
    return ( $vs_file, $pool_file );
}

#
# Parameter validation
#
if ( ! defined $envid or ! defined $branch) {
    logecho "Error: The pamameter '-e' and '-b' must be set.\n";
    usage();
    exit 1;
}

#
# Get the timestamp.
#
sub get_timestamp {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $timestamp = sprintf ( "%04d%02d%02d%02d%02d",
        $year+1900,$mon+1,$mday,$hour,$min);
    return $timestamp;
}

#
# Filter the including array list.
#
sub filter_list {
    my ( $include_array_ref, $exclude_array_ref ) = @_;
    my @final_list;
    foreach my $excluded ( @{ $exclude_array_ref } ) {
        my $include = 0;
        foreach my $included ( @{ $include_array_ref } ) {
            if ( $included eq $excluded ) {
                $include = 1;
            }
        }
        if ( ! $include ) {
            push @final_list, $excluded;
        }
    }
    return @final_list;
}

#
# Main
#
my ( $internal_ic, $external_ic ) = get_icontrol( $envid );

# Backup the configuration file.
my $internal_bigip_server = get_bigip_server( $envid, "int" );
my $external_bigip_server = get_bigip_server( $envid, "ext" );
system("/usr/bin/sudo /bin/mkdir -p /var/log/bigip");
system("/usr/bin/sudo /bin/chmod ugo+w /var/log/bigip");
download_configuration( $internal_ic, '/config/bigip.conf', "/var/log/bigip/$internal_bigip_server-int-bigip.conf." . get_timestamp() );
download_configuration( $external_ic, '/config/bigip.conf', "/var/log/bigip/$external_bigip_server-ext-bigip.conf." . get_timestamp() );

my @internal_excluded_vs = get_exclude_list( $envid, "internal", "virtual" );
my @external_excluded_vs = get_exclude_list( $envid, "external", "virtual" );
my @internal_excluded_pool = get_exclude_list( $envid, "internal", "pool" );
my @external_excluded_pool = get_exclude_list( $envid, "external", "pool" );

my @include_vs = split ",", $including_vs if defined $including_vs;
my @include_pool = split ",", $including_pool if defined $including_pool;
my @final_internal_excluded_vs = filter_list( \@include_vs, \@internal_excluded_vs );
my @final_external_excluded_vs = filter_list( \@include_vs, \@external_excluded_vs );
my @final_internal_excluded_pool = filter_list( \@include_pool, \@internal_excluded_pool );
my @final_external_excluded_pool = filter_list( \@include_pool, \@external_excluded_pool );

# Remove the virtual servers, rules and pools for specific environment.
logecho "Deleting virtual servers for $envid ...\n";
delete_not_excluded_env_virtual_servers( $external_ic, $envid, @final_external_excluded_vs );
delete_not_excluded_env_virtual_servers( $internal_ic, $envid, @final_internal_excluded_vs );
logecho "Deleting rules for $envid ...\n";
delete_env_rules( $internal_ic, $envid );
delete_env_rules( $external_ic, $envid );
logecho "Deleting pools for $envid ...\n";
delete_not_excluded_env_pools( $external_ic, $envid, @final_external_excluded_pool );
delete_not_excluded_env_pools( $internal_ic, $envid, @final_internal_excluded_pool );

# Deploy virtual servers, rules and pools for specific environment.
my $int_tmpdir = File::Temp->newdir();
my $ext_tmpdir = File::Temp->newdir();
logecho "Generating virtual server, pool configuration files ...\n";
my ($external_vs_conf, $external_pool_conf) = generate_configuration( $envid, $branch, $ext_tmpdir, "ext", \@final_external_excluded_vs, \@final_external_excluded_pool );
my ($internal_vs_conf, $internal_pool_conf) = generate_configuration( $envid, $branch, $int_tmpdir, "int", \@final_internal_excluded_vs, \@final_internal_excluded_pool );
logecho "Deploying pools for $envid ...\n";
deploy_configuration( $envid, "int", $internal_ic, $internal_pool_conf, $show_verbose);
deploy_configuration( $envid, "ext", $external_ic, $external_pool_conf, $show_verbose);
#system("/nas/utl/devops/bin/deploy-irules -e $envid -b $branch");
system("/nas/home/minjzhang/bin/deploy-irules -e $envid -b $branch");
logecho "Deploying virtual servers for $envid ...\n";
deploy_configuration( $envid, "int", $internal_ic, $internal_vs_conf, $show_verbose);
deploy_configuration( $envid, "ext", $external_ic, $external_vs_conf, $show_verbose);

save_configuration( $internal_ic );
save_configuration( $external_ic );

exit 0;
