#!/usr/bin/perl
#
# Configure block/unblock list interactively.
#
# Usage: Cloak-Uncloak [options]
#
# Options:
#  -u | --username          Specify the username to login to LBA server.
#  -x | --password          Specify the password to login to LBA server.
#  -h | --help              Show help information.
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
use lib '/nas/utl/lib/perl';
#use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Net::SSH::Expect;

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $lba_username = qw{};
my $lba_password = qw{};
my $options_okay = GetOptions (
   'u|username=s' => \$lba_username,
   'x|password=s' => \$lba_password,
   'v|verbose'    => \$show_verbose,
   'h|help'       => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit 1;
}

if ( $show_usage ) {
   usage();
   exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP

-------------------------------------------------------------------
| Configure block/unblock list interactively.                     |
| Usage: Cloak-Uncloak [options]                                  |
| Options:                                                        |
-------------------------------------------------------------------
END_OF_HELP
}

#
# Login to ssh
#
sub login_ssh {
    my ( $hostname, $username, $password ) = @_;

    my $ssh = Net::SSH::Expect->new(
        host => "$hostname",
        user => "$username",
        raw_pty => 1
    );

    my $prompt = "[Pp]assword";
    $ssh->run_ssh();
    $ssh->waitfor('qr/\(yes\/no\)\?$/',2);
    $ssh->send("yes\n");
    $ssh->waitfor('qr/$prompt:\s*$/',5);
    $ssh->send("$password\n");
    my $login_welcome = $ssh->exec("show sys version");

    if ( $login_welcome !~ m/Last login/ ) {
        die "Login has failed. Login output was $login_welcome";
    }

    return $ssh;
}

#
# Close ssh connection
#
sub close_ssh {
    my ( $ssh ) = @_;
    $ssh->close();
}

#
# Execute command via ssh mutely
#
sub mute_execute_ssh {
    my ( $ssh, $command ) = @_;
    my $output = $ssh->exec($command);
    my @original_outputs = split(/\n/, $output);
    my @outputs;
    foreach my $line ( @original_outputs ) {
        if ( $line !~ /tmos/ ) {
            chomp $line;
            push(@outputs, $line);
        }
    }
    return @outputs;
}

#
# Execute command via ssh
#
sub execute_ssh {
    my ( $ssh, $command ) = @_;
    my @outputs = mute_execute_ssh( $ssh, $command );
    print join "\n", @outputs;
}

#
# Show current list
#
sub print_list {
    my ( $ssh, $listname ) = @_;
    my @outputs = mute_execute_ssh( $ssh, "list ltm data-group $listname records" );
    my @ip_addresses;
    foreach my $line ( @outputs ) {
        if ( $line =~ /{ }/ ) {
            $line =~ s/^\s*(.*)\s*{ }\s*$/$1/;
            push( @ip_addresses, $line );
        }
    }
    if ( defined $ip_addresses[0] ) {
        print "\n";
        print "Current $listname:\n";
        print join "\n", @ip_addresses;
        print "\n";
    } else {
        print "$listname is empty.\n";
    }
}

#
# Main
#

#Readonly my $HOSTNAME => 'srwp01lba040';
Readonly my $HOSTNAME => 'srwd00lba040';
#Readonly my $HOSTNAME_CANONICAL => "$HOSTNAME.stubprod.com";
Readonly my $HOSTNAME_CANONICAL => "$HOSTNAME.stubcorp.dev";
Readonly my $TMSH_EXEC => 'tmsh';

print "-------------------------------------------------------------------
| The script helps to configure block/unblock list interactively. |
-------------------------------------------------------------------
";

if ( not defined $lba_username ) {
    print "Username: ";
    my $lba_username = <>;
    chomp $lba_username;
}
if ( not defined $lba_password ) {
    print "Password: ";
    system("stty -echo");
    my $lba_password = <>;
    chomp $lba_password;
    system("stty echo");
    print "\n";
}

my $ssh = login_ssh($HOSTNAME_CANONICAL, $lba_username, $lba_password);

# Choose list
print "Enter the list you want to configure:
1. blacklist
2. whitelist
3. hackercrackerlist
b. back
> ";
my $listname = <>;
chomp $listname;

if ( $listname eq "b" ) {
    close_ssh($ssh);
    exit 0;
}
if ( $listname !~ /[123]/ ) {
    usage();
    next;
} else {
    if ( $listname eq "1" ) {
        $listname = "blacklist";
    } elsif ( $listname eq "2" ) {
        $listname = "whitelist";
    } else {
        $listname = "hackercrackerlist";
    }
}

# Choose action
print "Enter the action you want to do for $listname:
1. list
2. add
3. delete
b. back
> ";
my $action = <>;
chomp $action;
if ( $action eq "b" ) {
    close_ssh($ssh);
    exit 0;
}
if ( $action !~ /[123]/ ) {
    usage();
    next;
} else {
    if ( $action eq "1" ) {
        $action = "list";
    } elsif ( $action eq "2" ) {
        $action = "add";
    } else {
        $action = "delete";
    }
}

# Do action
Readonly my $IP_EXAMPLES =>
'-------------------------------------------------------------------
| 1.1.1.1                                                         |
| 1.1.1.1 2.2.2.2                                                 |
| "Mozilla/5.0 (Windows NT 6.1; WOW64)"                           |
-------------------------------------------------------------------';

if ( $action eq "list" ) {
    print_list( $ssh, $listname );
} else {
    my $ip_address = qw{};
    my $command = qw{};
    my $confirm = qw{};
    if ( $action eq "add" ) {
        print "Enter the IP address you want to $action to $listname. For example:\n";
        print "$IP_EXAMPLES\n";
        print "> ";
        $ip_address = <>;
        chomp $ip_address;
        $command = "modify ltm data-group $listname records add {$ip_address}";
        print "$command\n";
        print "Please confirm to execute the command above (y/n): ";
        $confirm = <>;
        if ( $confirm =~ /y/i ) {
            execute_ssh($ssh, $command);
            print_list( $ssh, $listname );
        }
    } elsif ( $action eq "delete" ) {
        print "Enter the IP address you want to $action from $listname. For example:\n";
        print "$IP_EXAMPLES\n";
        print_list( $ssh, $listname );
        print "> ";
        $ip_address = <>;
        chomp $ip_address;
        $command = "modify ltm data-group $listname records delete {$ip_address}";
        print "$command\n";
        print "Please confirm to execute the command above (y/n): ";
        $confirm = <>;
        if ( $confirm =~ /y/i ) {
            execute_ssh($ssh, $command);
            print_list( $ssh, $listname );
        }
    }
}

close_ssh($ssh);
exit 0;
