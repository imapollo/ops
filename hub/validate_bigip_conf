#!/usr/bin/perl
#
# Validate the BIG-IP configurations for specified environment.
# Following items will be checked:
#  - Check if VIPs point to correct Pool.
#  - Check if VIPs using correct iRule.
#  - Check if any missing/extra VIPs.
#  - Check if VIPs DNS/IP is correct.
#  - Check if Pools DNS/IP is correct.
#  - Check if any missing/extra Pool.
#
# Usage: validate_bigip_conf [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -b | --branch            Specify the branch to check based on.
#                           Default: main.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  validate_bigip_conf -e srwd76
#  validate_bigip_conf -e srwd76 -b rb_ecomm_13_13
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use File::Temp;

use Stubhub::BigIP::System::Util qw (
                                    get_icontrol
                                );
use Stubhub::BigIP::Pool::Handler qw (
                                    get_env_pool_list
                                );
use Stubhub::BigIP::Pool::ConfigGenerator qw (
                                    generate_pool_separate_configs
                                );
use Stubhub::BigIP::Pool::Parser qw (
                                    parse_pools
                                );
use Stubhub::BigIP::Virtual::Handler qw (
                                    get_env_virtual_servers
                                );
use Stubhub::BigIP::Virtual::ConfigGenerator qw (
                                    generate_vs_separate_configs
                                );
use Stubhub::BigIP::Virtual::Parser qw (
                                    parse_virtual_servers
                                );
use Stubhub::P4::Info qw (
                                    get_p4_branch_path
                                );
use Stubhub::P4::Client qw (
                                    check_out_perforce_file
                                    clean_perforce_client
                                );
use Stubhub::P4::Constants;
# use Stubhub::Util::Host qw (
#                             get_hostname_by_ip
#                         );

# Get options
my $show_usage = qw{};
my $show_verbose= qw{};
my $envid = qw{};
my $branch = "main";
my $options_okay = GetOptions (
   'e|env=s'     => \$envid,
   'b|branch=s'  => \$branch,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

Stubhub::Log::Util->init();

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $envid ) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Get the expected virtual server list from P4.
#
sub get_expected_vs_list {
    my ( $vs_configuration_dir ) = @_;
    my $virtual_servers_ref = parse_virtual_servers( $vs_configuration_dir );
    my @expected_vs_list;
    foreach my $virtual_server_ref ( @{ $virtual_servers_ref } ) {
        push @expected_vs_list, $virtual_server_ref->{ 'name' };
    }
    print join "\n", @expected_vs_list;
    return @expected_vs_list;
}

#
# Get the expected pool list from P4.
#
sub get_expected_pool_list {
    my ( $pool_configuration_dir ) = @_;
    my $pools_ref = parse_pools( $pool_configuration_dir );
    my @expected_pool_list;
    foreach my $pool_ref ( @{ $pools_ref } ) {
        push @expected_pool_list, $pool_ref->{ 'name' };
    }
    print join "\n", @expected_pool_list;
    return @expected_pool_list;
}

#
# Validate the virtual server list based on templates on P4.
#
sub validate_vs_list {
}

#
# Validate the pool list based on templates on P4.
#
sub validate_pool_list {
}

#
# Validate virtual server configurations.
# - Check if virtual server is pointed to correct Pool.
# - Check if virtual server is using correct iRule.
# - Check if virtual server DNS/IP is correct.
#
sub validate_vs_conf {
}

#
# Validate pool configurations.
# - Check if pool DNS/IP is correct.
#
sub validate_pool_conf {
}

#
# Get the BIGIP templates from P4 depot.
#
sub get_bigip_templates {
    my ( $branch ) = @_;
    my $p4_branch_path = get_p4_branch_path( $branch );


    my ( $dynamic_p4_client, $dynamic_p4_dir ) = check_out_perforce_file( "/$p4_branch_path/$Stubhub::P4::Constants::BIGIP_TEMPLATE_SUBDIR/..." );
    return ( $dynamic_p4_client, $dynamic_p4_dir, $p4_branch_path );
}

#
# Main
#
my ( $internal_ic, $external_ic ) = get_icontrol( $envid );
my %icontrols = (
    'int' => $internal_ic,
    'ext' => $external_ic
);

my ( $dynamic_p4_client, $dynamic_p4_dir, $p4_branch_path ) = get_bigip_templates( $branch );

foreach my $ic_key ( keys %icontrols ) {
    my $vs_output_dir = File::Temp->newdir();
    my $pool_output_dir = File::Temp->newdir();
    generate_vs_separate_configs( "${dynamic_p4_dir}${p4_branch_path}/$Stubhub::P4::Constants::BIGIP_TEMPLATE_SUBDIR/$Stubhub::P4::Constants::BIGIP_VS_SUBDIR/$ic_key", $envid, $vs_output_dir );
    generate_pool_separate_configs( "${dynamic_p4_dir}${p4_branch_path}/$Stubhub::P4::Constants::BIGIP_TEMPLATE_SUBDIR/$Stubhub::P4::Constants::BIGIP_POOL_SUBDIR/$ic_key", $envid, $pool_output_dir );

    my @env_vs_list = get_env_virtual_servers( $icontrols{ $ic_key }, $envid );
    my @env_expected_vs_list = get_expected_vs_list( $vs_output_dir );
    my @env_pool_list = get_env_pool_list( $icontrols{ $ic_key }, $envid );
    my @env_expected_pool_list = get_expected_pool_list( $pool_output_dir );

    validate_vs_list();
    validate_pool_list();
    validate_vs_conf();
    validate_pool_conf();
}

clean_perforce_client( $dynamic_p4_client, $dynamic_p4_dir );

exit 0;
