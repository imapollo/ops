#!/usr/bin/perl
#
# Validate the BIG-IP configurations for specified environment.
# Following items will be checked:
#  - Check if VIPs point to correct Pool.
#  - Check if VIPs using correct iRule.
#  - Check if any missing/extra VIPs.
#  - Check if VIPs DNS/IP is correct.
#  - Check if Pools DNS/IP is correct.
#  - Check if any missing/extra Pool.
#
# Usage: validate_bigip_conf [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -b | --branch            Specify the branch to check based on.
#                           Default: main.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  validate_bigip_conf -e srwd76
#  validate_bigip_conf -e srwd76 -b rb_ecomm_13_13
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Data::Dumper;

# use BigIP::iControl;
use Stubhub::BigIP::System::Util qw (
                                    get_icontrol
                                );
use Stubhub::BigIP::Pool::Handler qw (
                                    get_env_pool_list
                                );
use Stubhub::BigIP::Virtual::Handler qw (
                                    get_env_virtual_servers
                                );
# use Stubhub::Util::Host qw (
#                             get_hostname_by_ip
#                         );

# Get options
my $show_usage = qw{};
my $show_verbose= qw{};
my $envid = qw{};
my $branch = "main";
my $options_okay = GetOptions (
   'e|env=s'     => \$envid,
   'b|branch=s'  => \$branch,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

Stubhub::Log::Util->init();

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $envid ) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Get the expected virtual server list from P4.
#
sub get_expected_vs_list {
}

#
# Get the expected pool list from P4.
#
sub get_expected_pool_list {
}

#
# Validate the virtual server list based on templates on P4.
#
sub validate_vs_list {
}

#
# Validate the pool list based on templates on P4.
#
sub validate_pool_list {
}

#
# Validate virtual server configurations.
# - Check if virtual server is pointed to correct Pool.
# - Check if virtual server is using correct iRule.
# - Check if virtual server DNS/IP is correct.
#
sub validate_vs_conf {
}

#
# Validate pool configurations.
# - Check if pool DNS/IP is correct.
#
sub validate_pool_conf {
}

#
# Main
#
my @icontrols = get_icontrol( $envid );

foreach my $icontrol ( @icontrols ) {
    my @env_vs_list = get_env_virtual_servers( $icontrol, $envid );
    my @env_expected_vs_list = get_expected_vs_list();
    my @env_pool_list = get_env_pool_list( $icontrol, $envid );
    my @env_expected_pool_list = get_expected_pool_list();

    validate_vs_list();
    validate_pool_list();
    validate_vs_conf();
    validate_pool_conf();
}
