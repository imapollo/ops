#!/usr/bin/perl
#
# Switch the Wide IP pools order.
#
# Usage: switch_wideip [options]
#
# Options:
#  -w | --wideip            Specify the wideip need to be modified.
#  -p | --pool              Specify the pool member need to be re-order.
#  -s | --server            Specify the lba server if needed.
#  -u | --username          Specify the username to login to BigIP.
#  -x | --password          Specify the password to login to BigIP.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  switch_wideip -w test.noc.com -p test2
#
# Author: minjzhang
#

use strict;
use warnings;
use Carp;
use Getopt::Long;

use lib '/nas/reg/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Data::Dumper;
use BigIP::iControl;
use MIME::Base64;
use Stubhub::BigIP::System::Util qw (
                                    get_icontrol_instance
                                );
use Stubhub::Util::SSH qw (
                            login_ssh
                            close_ssh
                            execute_ssh
                            mute_execute_ssh
                        );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $wideip = qw{};
my $pool = qw{};
my $server = qw{};
my $username = qw{};
my $password = qw{};
my $options_okay = GetOptions (
    'w|wideip=s'  => \$wideip,
    'p|pool=s'    => \$pool,
    's|server=s'  => \$server,
    'u|username=s'=> \$username,
    'x|password=s'=> \$password,
    'v|verbose'   => \$show_verbose,
    'h|help'      => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
    print <<END_OF_HELP
Switch the Wide IP pools order.

Usage: switch_wideip [options]

Options:
 -w | --wideip            Specify the wideip need to be modified.
 -p | --pool              Specify the pool member need to be re-order.
 -s | --server            Specify the lba server if needed.
 -u | --username          Specify the username to login to BigIP.
 -x | --password          Specify the password to login to BigIP.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 switch_wideip -w test.noc.com -p test2

END_OF_HELP
}

#
# Print pool list.
#
sub print_wideip_pool_list {
    my ( $icontrol, $wideip ) = @_;

    my $pool_index = 1;
    my @pool_list = $icontrol->get_wideip_pool_list( $wideip );

    print "Pools for Wide IP $wideip:\n";
    my $primary_selected = 0;

    foreach my $a_pool ( @pool_list ) {
        my $pool_available = 0;
        $pool_available = 1 if $icontrol->get_gtm_pool_status( $a_pool ) ne 'AVAILABILITY_STATUS_RED';
        my $pool_enabled = 0;
        $pool_enabled = 1 if $icontrol->get_gtm_pool_enabled_status( $a_pool ) eq 'ENABLED_STATUS_ENABLED';
        print "$pool_index) $a_pool";

        if ( $pool_available and $pool_enabled and not $primary_selected ) {
            print " [ primary ]";
            $primary_selected = 1;
        }
        if ( not $pool_available ) {
            print " [ down ]";
        }
        if ( not $pool_enabled ) {
            print " [ disabled ]";
        }
        print "\n";
        $pool_index += 1;
    }
    return @pool_list;
}

#
# Swtich pool for WideIP.
#
sub switch_wideip_pool {
    my ( $server, $icontrol, $wideip, $pool ) = @_;
    Readonly my $star => 'root';
    Readonly my $war => 'bHVtbkIwdGw=';
    my $ssh = login_ssh( $server, $star, decode_base64( $war ) );
    my $command = "tmsh modify gtm wideip $wideip pools modify {$pool {order 0}}";
    my @output = mute_execute_ssh( $ssh, $command );

    my $has_error = 0;
    foreach my $line ( @output ) {
        if ( $line =~ /\bnot\b/i or $line =~ /\berror\b/i ) {
            print $line . "\n";
            $has_error = 1;
        }
    }

    my $is_global_availability = 0;
    if ( $icontrol->get_wideip_lb_method( $wideip ) eq 'LB_METHOD_GLOBAL_AVAILABILITY' ) {
        $is_global_availability = 1;
    }

    if ( not $has_error ) {
        print_wideip_pool_list( $icontrol, $wideip );
    }
}

#
# Verify if user account belongs to NOC group.
#
sub verify_user_group {
    my ( $username ) = @_;
    my $groups = `/usr/bin/groups $username`;
    if ( $groups =~ /\bnoc\b/ ) {
        return 0;
    } else {
        croak "The user $username is not a member of NOC.\n";
    }
}

#
# Get the BigIP LBA server.
#
sub get_lba_server {
    my ( $lba_server ) = @_;
    if ( not defined $lba_server ) {
        return "srwd00lba012.stubcorp.dev";
    } else {
    return $lba_server;
    }
}

#
# Main
#

my $lba_server = get_lba_server( $server );

#
# Prompt for username and password.
#
if ( not defined $username ) {
    print "Username: ";
    $username = <>;
    chomp $username;
}
if ( not defined $password ) {
    print "Password: ";
    system("stty -echo");
    $password = <>;
    chomp $password;
    system("stty echo");
    print "\n";
}

# verify_user_group( $username );
my $icontrol = get_icontrol_instance( $lba_server, $username, $password );

if ( not defined $wideip ) {
    my $wideip_index = 1;
    my @wideip_list = $icontrol->get_wideip_list();
    print "Wide IPs on the BigIP server:\n";
    foreach my $wide_ip ( @wideip_list ) {
        print "$wideip_index) $wide_ip\n";
        $wideip_index += 1;
    }
    print "Enter the number of the Wide IP: ";
    $wideip_index = <>;
    if ( $wideip_index =~ /[0-9]+/ ) {
        $wideip = $wideip_list[ $wideip_index - 1 ];
    } else {
        die "Please enter the number of the Wide IP.\n";
    }
}

if ( not defined $pool ) {
    my @pool_list = print_wideip_pool_list( $icontrol, $wideip );

    print "Enter the number of the Pool: ";
    my $pool_index = <>;
    if ( $pool_index =~ /[0-9]+/ ) {
        $pool = $pool_list[ $pool_index - 1 ];
    } else {
        die "Please enter the number of Pool.\n";
    }
}

switch_wideip_pool( $lba_server, $icontrol, $wideip, $pool );

exit 0;
