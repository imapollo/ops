#!/usr/bin/perl
#
# Validate the BIG-IP settings for specified environment.
# Following items will be checked:
#  - Pool
#
# Return 0 if all the pools status are PASS or WARN.
# Return 1 if > 50% pools status are PASS or WARN.
# Return 2 if < 50% pools status are PASS or WARN.
#
# Usage: validate_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -m | --member            Show the detail pool member status.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  validate_bigip -e srwd76
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';
# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use BigIP::iControl;
use MIME::Base64;
use Stubhub::BigIP::System::Util qw (
                                    get_icontrol
                                );
use Stubhub::BigIP::Pool::Handler qw (
                                    get_env_pool_list
                                    get_pool_members_status
                                );
use Stubhub::Log::Util qw (
                            init
                        );
use Stubhub::Util::Host qw (
                            get_hostname_by_ip
                        );

# Get options
my $show_usage = qw{};
my $show_member_status = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $options_okay = GetOptions (
   'e|env=s'     => \$envid,
   'm|member'    => \$show_member_status,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

Stubhub::Log::Util->init();

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Validate the BIG-IP settings for specified environment.
Following items will be checked:
 - Pool

Return 0 if all the pools status are PASS or WARN.
Return 1 if > 50% pools status are PASS or WARN.
Return 2 if < 50% pools status are PASS or WARN.

Usage: validate_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -m | --member            Show the detail pool member status.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 validate_bigip -e srwd76

END_OF_HELP
}

#
# Validate Pool status for specific environment.
#
sub validate_env_pool_status {
    my ( $iControl, $pattern ) = @_;
    my @pool_list = get_env_pool_list( $iControl, $pattern );
    my @filtered_pool_list = filter_pool_list( @pool_list );
    my $pass_count = 0;
    my $fail_count = 0;
    my @pools_status;
    foreach my $pool ( @filtered_pool_list ) {
        my $pool_members_ref = get_pool_members_status( $iControl, $pool );
        my $pool_members_status_ref = ${ $pool_members_ref }[0];

        my %pool_status;

        $pool_status{ 'pool' } = $pool;
        $pool_status{ 'status' } = $iControl->get_ltm_pool_availability_status( $pool );
        $pool_status{ 'status_description' } = $iControl->get_ltm_pool_status_as_string( $pool );
        $pool_status{ 'members' } = $pool_members_status_ref;

        my $pass = 0;

        if ( $pool_status{ 'status_description' } =~ /either don't have service checking enabled/ ) {
            printf "%-45s %-20s\n", $pool_status{ 'pool' }, "WARN";
            $pass = 0;
            $pass_count += 1;
        } elsif ( $pool_status{ 'status_description' } !~ /The pool is available/ ) {
            printf "%-45s %-20s\n", $pool_status{ 'pool' }, "FAIL";
            $pass = 1;
            $fail_count += 1;
        } else {
            printf "%-45s %-20s\n", $pool_status{ 'pool' }, "PASS" if $show_verbose;
            $pass = 0;
            $pass_count += 1;
        }

        if ( $show_member_status ) {
            foreach my $pool_member_status_ref ( @{ $pool_members_status_ref } ) {
                my $member_host = get_hostname_by_ip( $pool_member_status_ref->{'member'}->{'address'} );
                my $member_port = $pool_member_status_ref->{'member'}->{'port'};
                my $member_status = $pool_member_status_ref->{'object_status'}->{'availability_status'};
                my $member_enabled = $pool_member_status_ref->{'object_status'}->{'enabled_status'};

                if ( $member_host eq "" ) {
                } else {
                    $member_host = "$member_host:$member_port";
                }

                if ( $member_status eq "AVAILABILITY_STATUS_GREEN" ) {
                    $member_status = "PASS";
                } else {
                    $member_status = "FAIL";
                }

                if ( $member_enabled eq "ENABLED_STATUS_ENABLED" ) {
                    $member_enabled = "Enabled";
                } else {
                    $member_enabled = "Disabled";
                }

                if ( $show_verbose or $pass == 1 ) {
                    printf "       %-29s %-8s %-5s\n", $member_host, $member_enabled, $member_status;
                }
            }
        }
    }
    if ( scalar @filtered_pool_list == 0 ) {
        printf "Error: No pools found for $pattern\n";
        return 0;
    }
    return ( $pass_count, $fail_count );
}

#
# Filter with ignore POOL list.
#
sub filter_pool_list {
    my ( @pool_list ) = @_;
    my @filtered_pool_list;
    foreach my $pool_name ( @pool_list ) {
        if ( $pool_name !~ /SRW[QDE][0-9]+-ABX-FTP$/ 
                and $pool_name !~ /SRW[QDE][0-9]+-ABX$/
                and $pool_name !~ /SRW[QDE][0-9]+-GEN3APPS$/
                and $pool_name !~ /SRW[QDE][0-9]+-REST$/
                and $pool_name !~ /SRW[QDE][0-9]+-SRH$/
                and $pool_name !~ /SRW[QDE][0-9]+-USR$/
                and $pool_name !~ /SRW[QDE][0-9]+-DSC$/
                and $pool_name !~ /SRW[QDE][0-9]+-DISRUPTIVE$/
                and $pool_name !~ /SRW[QDE][0-9]+-EHCACHE$/ ) {
            push @filtered_pool_list, $pool_name;
        }
    }
    return @filtered_pool_list;
}

#
# Uniq the items in array.
#
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

#
# Parameter validation
#
if ( ! defined $envid) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Main
#
my ( $internal_ic, $external_ic ) = get_icontrol( $envid );

my ( $ext_pass_count, $ext_fail_count )= validate_env_pool_status( $external_ic, $envid );
my ( $int_pass_count, $int_fail_count )= validate_env_pool_status( $internal_ic, $envid );

my $overall_pass_rate = ( $ext_pass_count + $ext_fail_count + $int_pass_count + $int_fail_count ) / ( $ext_pass_count + $int_pass_count );

if ( $overall_pass_rate == 1 ) {
    print "====================================\n" if $show_verbose;
    print "Overall: PASS\n";
    exit 0;
} elsif ( $overall_pass_rate > 1 and $overall_pass_rate < 2 ) {
    print "====================================\n" if $show_verbose;
    print "Overall: FAIL\n";
    exit 1;
}
else {
    print "====================================\n";
    print "Overall: FAIL\n";
    exit 2;
}

exit 0;
