#!/usr/bin/perl
#
# Validate the BIG-IP settings for specified environment.
# Following items will be checked:
#  - Virtual IP
#  - Pool
#  - Pool Members
#  - iRules
#
# Usage: validate_bigip [options]
#
# Options:
#  -e | --env               Specify the environment ID. For example: srwd76.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  validate_bigip -e srwd76
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/home/minjzhang/ops/util/lib';
use lib '/nas/reg/lib/perl';

use Readonly;
use Getopt::Long;
use Data::Dumper;
use BigIP::iControl;
use Stubhub::P4::Client qw (
                            check_out_perfoce_file
                            clean_perforce_client
                           );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $envid = qw{};
my $options_okay = GetOptions (
   'e|env=s'     => \$envid,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Validate the BIG-IP settings for specified environment.
Following items will be checked:
 - Virtual IP
 - Pool
 - Pool Members
 - iRules

Usage: validate_bigip [options]

Options:
 -e | --env               Specify the environment ID. For example: srwd76.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 validate_bigip -e srwd76

END_OF_HELP
}

#
# Get all the virtual servers.
#
sub get_virtual_servers {
    my ( $iControl ) = @_;
    my @virtual_servers = $iControl->get_vs_list();
    return sort @virtual_servers;
}

#
# Get environment specific virtual servers.
#
sub get_env_virtual_servers {
    my ( $iControl, $pattern ) = @_;
    my @full_virtual_servers = get_virtual_servers( $iControl );
    my @virtual_servers = grep /$pattern/i, @full_virtual_servers;
    return @virtual_servers;
}

#
# Get the hostname from IP address (nslookup).
#
sub get_hostname_from_ip {
    my ( $ip_address ) = @_;
    $ip_address =~ s/(.*):.*/$1/;
    my $hostnames = `nslookup $ip_address | grep name | cut -d" " -f3`;
    chomp $hostnames;
    $hostnames =~ s/\n/,/g;
    return $hostnames;
}

#
# Validate virtual servers.
#
sub validate_virtual_servers {
    my ( $iControl ) =@_;
    my @virtual_servers = get_virtual_servers( $iControl );
    foreach my $virtual_server ( @virtual_servers ) {
        my $vs_destination = $iControl->get_vs_destination($virtual_server);
        my $vs_hostname = get_hostname_from_ip($vs_destination);
        print "$virtual_server: $vs_hostname $vs_destination\n";
    }
}

#
# Validate virtual servers for specified environment.
#
sub validate_env_virtual_servers {
    my ( $iControl, $pattern ) =@_;
    my @virtual_servers = get_env_virtual_servers( $iControl, $pattern );
    foreach my $virtual_server ( @virtual_servers ) {
        my $vs_destination = $iControl->get_vs_destination($virtual_server);
        my $vs_hostname = get_hostname_from_ip($vs_destination);
        print "$virtual_server: $vs_hostname $vs_destination\n";
    }
}

#
# Validate default pool for specified environment.
#
sub validate_env_default_pool {
    my ( $iControl, $pattern ) =@_;
    my @virtual_servers = get_env_virtual_servers( $iControl, $pattern );
    foreach my $virtual_server ( @virtual_servers ) {
        my $default_pool_name = $iControl->get_default_pool_name($virtual_server);
        my $pool_name = $$default_pool_name[0];
        print "$virtual_server: $pool_name\n";
        if ( $pool_name ne "" ) {
            print "Members:\n";
            foreach my $member ( $iControl->get_pool_members($pool_name) ) {
                my $ip_address = $member;
                $ip_address =~ s/(.*):.*/$1/;
                my $hostnames = get_hostname_from_ip($ip_address);
                print "$hostnames $member\n";
            }
        }
    }
}

#
# Parameter validation
#
if ( ! defined $envid) {
    print "Error: The pamameter '-e' must be set.\n";
    usage();
    exit 1;
}

#
# Main
#
my $env_number = $envid;
$env_number =~ s/[srwd|srwe|SRWD|SRWE]//g;
chomp $env_number;

my $internal_bigip_server = qw{};
my $external_bigip_server = qw{};
Readonly my $BIGIP_USERNAME => 'svcacctrelmgt';
Readonly my $BIGIP_PASSWORD => 'R8bbitSt3w';
Readonly my $BIGIP_PORT     => 443;
Readonly my $BIGIP_PROTOCOL => 'https';

if ( $env_number >= 76 ) {
    $internal_bigip_server = 'srwd00lba014.stubcorp.dev';
    $external_bigip_server = 'srwd00lba042-cl.stubcorp.dev';
} else {
    $internal_bigip_server = '10.80.139.232';
    $external_bigip_server = '10.80.139.242';
}

my $external_ic = BigIP::iControl->new(
                                server => "$external_bigip_server",
                                username => "$BIGIP_USERNAME",
                                password => "$BIGIP_PASSWORD",
                                port     => $BIGIP_PORT,
                                proto    => "$BIGIP_PROTOCOL"
                            );
my $internal_ic = BigIP::iControl->new(
                                server => "$internal_bigip_server",
                                username => "$BIGIP_USERNAME",
                                password => "$BIGIP_PASSWORD",
                                port     => $BIGIP_PORT,
                                proto    => "$BIGIP_PROTOCOL"
                            );

my ( $dynamic_perforce_client, $dynamic_perfoce_dir )
    = check_out_perfoce_file("//depot/main/templates/fsroot/etc/stubhub/f5/...");
clean_perforce_client( $dynamic_perforce_client, $dynamic_perfoce_dir );

validate_env_virtual_servers( $external_ic, $envid );
validate_env_default_pool( $external_ic, $envid );
validate_env_virtual_servers( $internal_ic, $envid );
validate_env_default_pool( $internal_ic, $envid );

exit 0;
