#!/usr/bin/perl
#
# Parse the API gateway forward rules from files.
#
# Usage: parse_apigateway_forward [options]
#
# Options:
#  -s | --server            Specify the AGG host to check.
#  -e | --envid             Specify the environment Id.
#  -j | --json              Return the JSON format status.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  parse_apigateway_forward -s srwd10agg001.srwd10.com -e srwd83
#  parse_apigateway_forward -s srwd10agg001.srwd10.com -e srwd83 -j
#
# Author: minjzhang
#

use strict;
use warnings;
use Carp;
use Getopt::Long;
use Cwd 'abs_path';

# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';
use lib '/nas/reg/lib/perl';

use Data::Dumper;
use Readonly;
use JSON;
use XML::XPath;
use XML::XPath::XMLParser;
use Stubhub::Log::Util qw (
                            init
                            get_logger_with_loglevel
                        );
use Stubhub::Util::Command qw (
                            ssh_cmd
                        );

my $all_options = join " ", @ARGV;

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $agg_host = qw{};
my $return_json = qw{};
my $envid = qw{};
my $options_okay = GetOptions (
    's|server=s'  => \$agg_host,
    'e|envid=s'   => \$envid,
    'j|json'      => \$return_json,
    'v|verbose'   => \$show_verbose,
    'h|help'      => \$show_usage,
);

#
# Initiate log instance
#
Stubhub::Log::Util->init();
our $logger = get_logger_with_loglevel( $show_verbose );

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
    print <<END_OF_HELP

Parse the API gateway forward rules from files.

Usage: parse_apigateway_forward [options]

Options:
 -s | --server            Specify the AGG host to check.
 -e | --envid             Specify the environment Id.
 -j | --json              Return the JSON format status.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 parse_apigateway_forward -s srwd10agg001.srwd10.com -e srwd83
 parse_apigateway_forward -s srwd10agg001.srwd10.com -e srwd83 -j

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $agg_host || ! defined $envid ) {
    $logger->error( "The pamameter '-s', '-e' must be set.\n" );
    usage();
    exit 1;
}

my $hostname = `/bin/hostname`;
chomp $hostname;

if ( $hostname ne "$agg_host" ) {
    my $command = abs_path($0) . " " . $all_options;
    my ( $rc, @output ) = ssh_cmd( $agg_host, $command );
    print join "\n", @output;
    exit $rc;
}

#
# Main
#
Readonly my $RULE_DIR => '/opt/wso2am/repository/deployment/server/synapse-configs/default/api';

my %redirect_rules;

my @rule_files = <$RULE_DIR/*.xml>;
foreach my $rule_file ( @rule_files ) {
    my $xp = XML::XPath->new( filename => $rule_file );
    my $context_path = $xp->getNodeText('/api/@context');

    my $resource_nodeset = $xp->find('/api/resource');
    my @resource_nodes = $resource_nodeset->get_nodelist();
    my $node_index = 1;


    foreach my $resource_node ( @resource_nodes ) {

        my $url_path = $xp->getNodeText('/api/resource[' . $node_index . ']/@url-mapping');
        $url_path = $xp->getNodeText('/api/resource[' . $node_index . ']/@uri-template') if ( not defined $url_path or $url_path eq "" );

        my $forward_url = $xp->getNodeText('/api/resource[' . $node_index . ']/inSequence/class/property[@name=\'url\']/@value');
        $forward_url = $xp->getNodeText('/api/resource[' . $node_index . ']/inSequence/filter/then/class/property[@name=\'url\']/@value') if ( not defined $forward_url or $forward_url eq "");
        $forward_url = $xp->getNodeText('/api/resource[' . $node_index . ']/inSequence/filter/then/send/endpoint/address/@uri') if ( not defined $forward_url or $forward_url eq "");
        $forward_url = $xp->getNodeText('/api/resource[' . $node_index . ']/inSequence/switch/case/send/endpoint/address/@uri') if ( not defined $forward_url or $forward_url eq "");
        $forward_url =~ s/{HOST_NAME}/$envid/g;

        # stringification $forward_url
        $forward_url = join "", $forward_url;

        $redirect_rules{ "${context_path}${url_path}" } = $forward_url;

        $node_index = $node_index + 1;
    }
}

if ( $return_json ) {
    my $json_result = to_json( \%redirect_rules, { allow_blessed => 1 } );
    print $json_result;
} else {
    foreach my $key ( keys %redirect_rules ) {
        print "$key => $redirect_rules{ $key }\n";
    }
}

exit 0;
