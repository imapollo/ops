#!/usr/bin/perl
#
# Trace the request to determine which back-end server really
# getting the request. The script will determine the back-end
# server with following rules:
# - Based on the request path and irule if bond to virtual server.
# - Based on the default pool if no irule bond or path not found.
# - Based on the forward rule if going to API gateway.
#
# Usage: trace_request [options]
#
# Options:
#  -u | --url               Request the url. Default protocol: http.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  trace_request api.srwd83.com
#  trace_request https://payment.api.srwd83.com/paymentapi/ccping
#
# Author: minjzhang
#

use strict;
use warnings;
use Carp;
use Getopt::Long;

# use lib '/nas/utl/devops/lib/perl';
use lib '/nas/home/minjzhang/ops/util/lib';

use Stubhub::Log::Util qw (
                            init
                            get_logger_with_loglevel
                        );
use Stubhub::BigIP::System::Util qw (
                            get_icontrol
                        );
use Stubhub::BigIP::Virtual::Handler qw (
                            get_env_virtual_servers
                            get_vss_destinations
                        );

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $request_url = qw{};
my $options_okay = GetOptions (
    'u|url=s'     => \$request_url,
    'v|verbose'   => \$show_verbose,
    'h|help'      => \$show_usage,
);

#
# Initiate log instance
#
Stubhub::Log::Util->init();
our $logger = get_logger_with_loglevel( $show_verbose );

#
# Signal Handler
#
$SIG{'INT'} = \&sigIntHandler;

#
# Clean up and exit when catch SIGINT(2)
#
sub sigIntHandler {
    exit;
}

if ( $show_usage ) {
    usage();
    exit 0;
}

#
# Usage
#
sub usage {
    print <<END_OF_HELP

Trace the request to determine which back-end server really
getting the request. The script will determine the back-end
server with following rules:
- Based on the request path and irule if bond to virtual server.
- Based on the default pool if no irule bond or path not found.
- Based on the forward rule if going to API gateway.

Usage: trace_request [options]

Options:
 -u | --url               Request the url. Default protocol: http.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 trace_request api.srwd83.com
 trace_request https://payment.api.srwd83.com/paymentapi/ccping

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $request_url ) {
    $logger->error( "The pamameter '-u' must be set.\n" );
    usage();
    exit 1;
}

#
# Find the vritual server based on the request.
#
sub find_virtual_server {
    my ( $icontrols_ref, $envid, $protocol, $virtual_server ) = @_;
    foreach my $icontrol ( @{ $icontrols_ref } ) {
        my @virtual_servers = get_env_virtual_servers( $icontrol, $envid);
        my @destinations = get_vss_destinations( $icontrol, @virtual_servers );
        foreach my $destination ( @destinations ) {
            print $destination->{ 'address' } . "\n";
            print $destination->{ 'port' } . "\n";
        }
    }
}

#
# Get the iRule for virtual server.
#
sub get_irule_for_virtual_server {
    my ( $virtual_server ) = @_;
}

#
# Get the default pool for virtual server.
#
sub get_default_pool_for_virtual_server {
    my ( $virtual_server ) = @_;
}

#
# Parse the irule and get which pool is redirected to.
#
sub parse_irule {
    my ( $irule_on_f5, $url_path ) = @_;
}

#
# Parse the gateway forward rule to determine which virtual server
# is the request re-directed to.
#
sub parse_gateway_forward {
    my ( $gateway_server, $url_path ) = @_;
}

#
# Main
#
my $protocol = 'http';
# TODO when specify :8080
if ( $request_url =~ "^http[s]?://" ) {
    $protocol = $request_url;
    $protocol =~ s"^(http[s]?)://.*"$1";
}

my $virtual_server = $request_url;
$virtual_server =~ s"(http[s]?://)?([^/]*)(/.*)?"$2";
my $url_path = $request_url;
$url_path =~ s"(http[s]?://)?([^/]*)(/.*)?"$3";
my $envid = $virtual_server;
$envid =~ s".*\.(srw[deq][0-9]+)\.com"$1";

# List of internal and external bigip server.
my @icontrols = get_icontrol( $envid );
my ( $icontrol, $virtual_server_on_f5 ) = find_virtual_server( \@icontrols, $envid, $protocol, $virtual_server);
exit 0;
my $irule_on_f5 = get_irule_for_virtual_server( $virtual_server_on_f5 );
my $default_pool_on_f5 = get_default_pool_for_virtual_server( $virtual_server_on_f5 );
parse_irule( $irule_on_f5, $url_path );
my $gateway_server = qw{};
parse_gateway_forward( $gateway_server, $url_path );

exit 0;
