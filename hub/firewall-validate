#!/bin/bash
#
# Validate all the firewall rules, based on a rule table.
#
# Usage:
#  firewall-validate [options]
#
# Options:
#  -e | --env=..    Environemnt Id. For example: srwd90.
#  -d | --debug     Print debug messages
#
# Author: minjzhang@ebay.com
#

options=$@

envid=""
debug_level=0
overall_pass="PASS"

#
# Usage
#
function _usage() {
    cat <<EOF
firewall-validate $options
$*
Usage: firewall-validate [options]
Options:
 -e | --env=..        Environemnt Id. For example: srwd90.
 -d | --debug         Print debug messages.
EOF
}


#
# Get options
#
OPTS=`getopt -o e:d -l env:,debug -- $options`
if [ $? != 0 ]
then
    echo "Unrecognized parameters."
    _usage
    exit 1
fi

eval set -- "$OPTS"

while true ; do
    case "$1" in
        -e | --env) envid=${2// }; shift 2;;
        -d | --debug) debug_level=1; shift;;
        --) shift; break;;
    esac
done

#
# Print debug message
#
function _print_debug_msg {
    debug_message=$1
    if [[ "$debug_level" == 1 ]]; then
        echo $debug_message
    fi
}

#
# Main
#

. /nas/home/minjzhang/bin/base

if [[ $envid == "" ]]; then
    echo "Parameter -e must be set."
    _usage
    exit 1
fi

firewall_rules=$VARS/firewall_rules
tmp_rule=$(mktemp)

cat $firewall_rules | while read rule
do
    echo $rule | sed "s/\${envid}/$envid/g" >> $tmp_rule
done

env_rules=`cat $tmp_rule`

for env_rule in $env_rules
do
    from_host=`echo $env_rule | awk -F: '{ print $1 }'`
    to_host=`echo $env_rule | awk -F: '{ print $2 }'`
    port=`echo $env_rule | awk -F: '{ print $3 }'`
    ssh $from_host ". /nas/home/minjzhang/bin/base; $BIN/check_port $to_host $port" &> /dev/null < /dev/null
    return_code=$?
    if [[ $return_code == 0 ]]; then
        echo "${from_host} -> ${to_host}:${port} : PASS"
    else
        echo "${from_host} -> ${to_host}:${port} : FAIL"
        overall_pass="FAIL"
    fi
done

echo "Overall firewall validation: ${overall_pass}"

rm -f $tmp_rule

exit 0
