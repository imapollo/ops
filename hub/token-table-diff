#!/usr/bin/perl
#
# Diff between token table properties.
#
# Usage: token-table-diff [options]
#
# Options:
#  -s | --source            The source environment id to diff. For example: srwd30.
#  -t | --target            The target environment id to diff. For example: srwd40.
#  -v | --verbose           Show verbose messages.
#  -h | --help              Show help information.
#
# Examples:
#  token-table-diff -s srwd30 -t srwd40
#
# Author: minjzhang
#

use strict;
use warnings;

use lib '/nas/reg/lib/perl';

use Getopt::Long;
use Readonly;
use File::Temp qw( tempfile );

use REG::P4::Util qw( $P4OPTS delete_dynamic_client dynamic_client logged_in p4cmd );
use REG::Util qw( mktmpdir );

sub clean_die ( @ ) ;

# Get options
my $show_usage = qw{};
my $show_verbose = qw{};
my $source_envid = qw{};
my $target_envid = qw{};

my $options_okay = GetOptions (
   's|source=s'  => \$source_envid,
   't|target=s'  => \$target_envid,
   'v|verbose'   => \$show_verbose,
   'h|help'      => \$show_usage,
);

if ( $show_usage ) {
   usage();
}

#
# Usage
#
sub usage {
   print <<END_OF_HELP
Diff between token table properties.

Usage: token-table-diff [options]

Options:
 -s | --source            The source environment id to diff. For example: srwd30.
 -t | --target            The target environment id to diff. For example: srwd40.
 -v | --verbose           Show verbose messages.
 -h | --help              Show help information.

Examples:
 token-table-diff -s srwd30 -t srwd40

Author: minjzhang

END_OF_HELP
}

#
# Parameter validation
#
if ( ! defined $source_envid || ! defined $target_envid ) {
    print "Error: Pamater '-s' and '-t' must be set.\n";
    usage();
    exit 1;
}

#
# Filter variables related to environment
#
sub filter_variables {
    my ( $line, $env_type, $envid, $db_host_id ) = @_;
    $line =~ s/\s*//g;
    $line =~ s/$envid/<ENVID>/g;

    if ( $env_type eq "srwd" ) {
        if ( $db_host_id == "08" ) {
            $line =~ s/\$<delphix_host01>/<DELPHIX_HOST>/;
            $envid =~ s/srw[de]([0-9]+)/$1/;
            $line =~ s/\$<delphix_db_prefix>$envid/<DELPHIX_SID>/;
        }
        if ( $db_host_id == "16" ) {
            $line =~ s/\$<delphix_host02>/<DELPHIX_HOST>/;
            $envid =~ s/srw[de]([0-9]+)/$1/;
            $line =~ s/\$<delphix_db_prefix_16>$envid/<DELPHIX_SID>/;
        }
        if ( $db_host_id == "19" ) {
            $line =~ s/\$<delphix_host03>/<DELPHIX_HOST>/;
            $envid =~ s/srw[de]([0-9]+)/$1/;
            $line =~ s/\$<delphix_db_prefix_19>$envid/<DELPHIX_SID>/;
        }
    } elsif ( $env_type eq "srwq" ) {
        if ( $db_host_id == "08" ) {
            $line =~ s/\$<delphix_host01>/<DELPHIX_HOST>/;
            $envid =~ s/srw[deq]([0-9]+)/$1/;
            $line =~ s/\$<delphix_dbq_prefix>$envid/<DELPHIX_SID>/;
        }
        if ( $db_host_id == "16" ) {
            $line =~ s/\$<delphix_host02>/<DELPHIX_HOST>/;
            $envid =~ s/srw[deq]([0-9]+)/$1/;
            $line =~ s/\$<delphix_dbq_prefix_16>$envid/<DELPHIX_SID>/;
        }
        if ( $db_host_id == "19" ) {
            $line =~ s/\$<delphix_host03>/<DELPHIX_HOST>/;
            $envid =~ s/srw[deq]([0-9]+)/$1/;
            $line =~ s/\$<delphix_dbq_prefix_19>$envid/<DELPHIX_SID>/;
        }
    } elsif ( $env_type eq "srwe" ) {
        if ( $envid eq "srwe01" ) {
            $line =~ s/\$<db17_pe>/<DELPHIX_SID>/;
        }
        if ( $envid eq "srwe02" ) {
            $line =~ s/\$<db17_pe02>/<DELPHIX_SID>/;
        }
        if ( $envid eq "srwe03" ) {
            $line =~ s/\$<db06_pe03>/<DELPHIX_SID>/;
        }
        if ( $envid eq "srwe04" ) {
            $line =~ s/\$<db18_pe>/<DELPHIX_SID>/;
        }
        if ( $envid eq "srwe05" ) {
            $line =~ s/\$<db18_pe05>/<DELPHIX_SID>/;
        }
        if ( $envid eq "srwe06" ) {
            $line =~ s/\$<db06_pe06>/<DELPHIX_SID>/;
        }
        if ( $db_host_id == "06" ) {
            $line =~ s/\$<db03_host01>/<DELPHIX_HOST>/;
        }
        if ( $db_host_id == "17" ) {
            $line =~ s/\$<db17_host01>/<DELPHIX_HOST>/;
        }
        if ( $db_host_id == "18" ) {
            $line =~ s/\$<db18_host01>/<DELPHIX_HOST>/;
        }
    }

    return $line;
}

#
# Get environemtn type
#
sub get_env_type {
    my ( $envid ) = @_;
    my $env_type = qw{};

    if ( $envid !~ m/srw[deq].*/ ) {
        print "Error: the environment id is wrong: $envid\n";
        usage();
        exit 1;
    } else {
        if ( $envid =~ m/srwd.*/ ) {
            $env_type = "srwd";
            return $env_type;
        } elsif ( $envid =~ m/srwe.*/ ) {
            $env_type = "srwe";
            return $env_type;
        } elsif ( $envid =~ m/srwq.*/ ) {
            $env_type = "srwq";
            return $env_type;
        }
    }
}

#
# Get database connection information
#
sub get_db_connection {
    my ( $envid, $env_type ) = @_;
    my $db_instance = qw{};
    if ( $env_type eq "srwd" ) {
        $envid =~ s/srwd([0-9]+)/$1/;
        $db_instance = "DE$envid";
    } elsif ( $env_type eq "srwe" ) {
        $envid =~ s/srwe([0-9]+)/$1/;
        $db_instance = "PE$envid";
    } elsif ( $env_type eq "srwq" ) {
        $envid =~ s/srwq([0-9]+)/$1/;
        $db_instance = "QE$envid";
    }


    my $tnsnames="/nas/home/oracle/OraHome/network/admin/tnsnames.ora";
    open TNSNAMES_FH, "<$tnsnames" or die $!;

    while ( my $line = <TNSNAMES_FH> ) {
        if ( $line =~ m/D[0-9]{2}$db_instance/ ) {
            $line =~ s/D([0-9]{2})$db_instance.*/$1/;
            close TNSNAMES_FH;
            return $line;
        }
    }

    close TNSNAMES_FH;
    return;
}

#
# Create temp directory
#
sub create_temp_directory {
    my ( $dir_prefix ) = @_;
    Readonly my $TMP_DIR => "/tmp";
    my $tmp_directory_token = "$TMP_DIR/$dir_prefix" . '${timestamp}';
    my $tmp_directory = mktmpdir ({
            try => $tmp_directory_token,
            perms => 0750,
        });
    return $tmp_directory;
}

#
# Check out a file from perforce
#
sub check_out_perfoce_file {
    my ( $file_path ) = @_;

    $ENV{ PATH } = ':/usr/local/bin'
        . ':/opt/java/bin'
        . ':/opt/ant/bin';

    defined $ENV{ P4CONFIG } and $ENV{ P4CONFIG } = "";

    my $dynamic_perforce_client;
    Readonly my $PERFORCE_DEFAULT_SERVER_SRW => "perforce.stubcorp.dev";
    Readonly my $PERFORCE_DEFAULT_PORT_NUMBER => "1666";

    my $dynamic_perfoce_dir = create_temp_directory( "p4-dynamic-wc-" );

    not defined $dynamic_perfoce_dir and clean_die "Could not create root directory of dynamic perforce client;"
        , " first attempt tried to create '$dynamic_perfoce_dir'";

    $P4OPTS = "-u build -p $PERFORCE_DEFAULT_SERVER_SRW:$PERFORCE_DEFAULT_PORT_NUMBER";

    $dynamic_perforce_client = dynamic_client({
            depot   => 'depot',
            root    => $dynamic_perfoce_dir,
        });

    $P4OPTS = "$P4OPTS -c $dynamic_perforce_client->{ Client }";

    maybe_log_into_perforce();
    sync_perforce_files( "/$file_path" );
    clean_perforce_client( $dynamic_perforce_client );

    return "$dynamic_perfoce_dir$file_path";
}

#
# Check out token-table from perforce depot
#
sub check_out_token_table {
    Readonly my $TOKEN_TABLE_FILE => "/internal/dev/properties/tokenization/token-table-env-stubhub-properties";
    my $checked_out_file = check_out_perfoce_file( $TOKEN_TABLE_FILE );
    return $checked_out_file;
}

#
# Clean up the directory
#
sub clean_up {
    my ( $temp_dir ) = @_;
    `/bin/rm -rf $temp_dir`;
}

#
# Clean up the perforce client
#
sub clean_perforce_client {
    my ( $dynamic_perforce_client, ) = @_;
    if ( defined $dynamic_perforce_client ) {
        delete_dynamic_client({
            client => $dynamic_perforce_client,
            p4opts => $P4OPTS,
        });
    }
}

#
# Sync files from perforce depot
#
sub sync_perforce_files {
    my ( $depot_file ) = @_;

    my $func = ( caller 0 )[ 3 ];
    my $ESP_TOKEN_TABLE_DEPOT_PATH="$depot_file";

    my $cmd = p4cmd( "sync $ESP_TOKEN_TABLE_DEPOT_PATH" );

    my @results = qx{ $cmd 2>&1 };
    my $status = $? >> 8;

    my $results = join( "", @results );

    $status != 0 and clean_die "cmd returned non-zero status; cmd => '$cmd';",
        " status => $status; output => '$results'";

    return;
}

#
# Login to perforce if necessary
#
sub maybe_log_into_perforce {
    my $BATCHMODE = ( not -t );
    # log into perforce if not already logged in
    if ( not logged_in() ) {
        if ( $BATCHMODE ) {
            clean_die "not logged into perforce; using => $P4OPTS";
        } else {
            system p4cmd( 'login' );
        }
    }
    my $status = $? >> 8;
    $status != 0 and clean_die "could not log into perforce using => $P4OPTS";

    return;
}

#
# Get the env properties from the token-table file
#
sub diff_env_properties {
    my ( $token_table_stubhub ) = @_;

    open TOKEN_TABLE_STUBHUB, "<$token_table_stubhub" or die $!;

    my $source_fh = new File::Temp( UNLINK => 1 );
    my $target_fh = new File::Temp( UNLINK => 1 );

    open $source_fh, ">$source_fh" or die $!;
    open $target_fh, ">$target_fh" or die $!;

    my $in_source_node = 0;
    my $in_target_node = 0;

    my @source_properties = ();
    my @target_properties = ();

    my $source_env_type = get_env_type( $source_envid );
    my $target_env_type = get_env_type( $target_envid );
    my $source_db_host_id = get_db_connection( $source_envid, $source_env_type );
    my $target_db_host_id = get_db_connection( $target_envid, $target_env_type );

    while ( my $line = <TOKEN_TABLE_STUBHUB> ) {
        # If matching the begining of source environment node
        my $on_node_boundary = 0;
        if ( $line =~ m/^\s*<$source_envid>\s*$/ ) {
            $in_source_node = 1;
            $on_node_boundary = 1;
        }
        # If matching the end of source environment node
        if ( $line =~ m/^\s*<\/$source_envid>\s*$/ ) {
            $in_source_node = 0;
            $on_node_boundary = 1;
        }
        # If matching the begining of target environment node
        if ( $line =~ m/^\s*<$target_envid>\s*$/ ) {
            $in_target_node = 1;
            $on_node_boundary = 1;
        }
        # If matching the end of source environment node
        if ( $line =~ m/^\s*<\/$target_envid>\s*$/ ) {
            $in_target_node = 0;
            $on_node_boundary = 1;
        }
        if ( $on_node_boundary == 1 ) {
            next;
        }

        # Not print empty line and comment line
        if ( $line !~ m/^\s*$/ && $line !~ m/^\s*#/ ) {
            if ( $in_source_node == 1 ) {
                $line = filter_variables($line, $source_env_type, $source_envid, $source_db_host_id);
                push(@source_properties, $line);
            }
            if ( $in_target_node == 1 ) {
                $line = filter_variables($line, $target_env_type, $target_envid, $target_db_host_id);
                push(@target_properties, $line);
            }
        }
    }

    print $source_fh join("\n", sort( @source_properties ) );
    print $target_fh join("\n", sort( @target_properties ) );
    $source_fh->flush();
    $target_fh->flush();

    print "$source_envid <==> $target_envid\n";
    print "-----------------------------------\n";
    my $result=`/usr/bin/diff -y --suppress-common-lines $source_fh $target_fh`;
    print $result;

    close TOKEN_TABLE_STUBHUB;
    close $source_fh;
    close $target_fh;
}

#
# Main
#

my $token_table_stubhub = check_out_token_table();
diff_env_properties( $token_table_stubhub );
clean_up( $token_table_stubhub );

exit 0;
